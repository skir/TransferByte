ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC_SAR_Seq_1.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_SAR_Seq_1_initVar
  18              		.bss
  19              		.type	ADC_SAR_Seq_1_initVar, %object
  20              		.size	ADC_SAR_Seq_1_initVar, 1
  21              	ADC_SAR_Seq_1_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_SAR_Seq_1_offset,2,4
  24              		.comm	ADC_SAR_Seq_1_countsPer10Volt,4,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_SAR_Seq_1_channelsConfig, %object
  28              		.size	ADC_SAR_Seq_1_channelsConfig, 4
  29              	ADC_SAR_Seq_1_channelsConfig:
  30 0000 00040000 		.word	1024
  31              		.section	.text.ADC_SAR_Seq_1_Start,"ax",%progbits
  32              		.align	2
  33              		.global	ADC_SAR_Seq_1_Start
  34              		.code	16
  35              		.thumb_func
  36              		.type	ADC_SAR_Seq_1_Start, %function
  37              	ADC_SAR_Seq_1_Start:
  38              	.LFB2:
  39              		.file 1 ".\\Generated_Source\\PSoC4\\ADC_SAR_Seq_1.c"
   1:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * File Name: ADC_SAR_Seq_1.c
   3:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Version 2.30
   4:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
   5:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Description:
   6:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Approximation ADC Component Component.
   8:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
   9:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Note:
  10:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  11:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  18:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** #include "ADC_SAR_Seq_1.h"
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 2


  19:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  20:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  21:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /***************************************
  22:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global data allocation
  23:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ***************************************/
  24:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** uint8 ADC_SAR_Seq_1_initVar = 0u;
  25:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** volatile int16 ADC_SAR_Seq_1_offset[ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM];
  26:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** volatile int32 ADC_SAR_Seq_1_countsPer10Volt[ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM];   /* Gain compensat
  27:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  28:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  29:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /***************************************
  30:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Local data allocation
  31:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ***************************************/
  32:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /* Channels configuration generated by customiser */
  33:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** static const uint32 CYCODE ADC_SAR_Seq_1_channelsConfig[] = { 0x00000400u };
  34:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  35:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  36:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
  37:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_Start
  38:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
  39:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  40:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
  41:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Performs all required initialization for this component
  42:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  and enables the power. The power will be set to the appropriate
  43:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  power based on the clock frequency.
  44:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  45:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
  46:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
  47:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  48:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
  49:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
  50:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  51:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global variables:
  52:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  The ADC_SAR_Seq_1_initVar variable is used to indicate when/if initial
  53:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  configuration of this component has happened. The variable is initialized to
  54:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Start() routine.
  57:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  If re-initialization of the component is required the variable should be set
  58:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  to zero before call of ADC_SAR_Seq_1_Start() routine, or the user may call
  59:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Init() and ADC_SAR_Seq_1_Enable() as done in the
  60:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Start() routine.
  61:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  62:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
  63:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_Start(void)
  64:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
  40              		.loc 1 64 0
  41              		.cfi_startproc
  42 0000 80B5     		push	{r7, lr}
  43              		.cfi_def_cfa_offset 8
  44              		.cfi_offset 7, -8
  45              		.cfi_offset 14, -4
  46 0002 00AF     		add	r7, sp, #0
  47              		.cfi_def_cfa_register 7
  65:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* If not Initialized then initialize all required hardware and software */
  66:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     if(ADC_SAR_Seq_1_initVar == 0u)
  48              		.loc 1 66 0
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 3


  49 0004 064B     		ldr	r3, .L3
  50 0006 1B78     		ldrb	r3, [r3]
  51 0008 002B     		cmp	r3, #0
  52 000a 04D1     		bne	.L2
  67:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
  68:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_Init();
  53              		.loc 1 68 0
  54 000c FFF7FEFF 		bl	ADC_SAR_Seq_1_Init
  69:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_initVar = 1u;
  55              		.loc 1 69 0
  56 0010 034B     		ldr	r3, .L3
  57 0012 0122     		mov	r2, #1
  58 0014 1A70     		strb	r2, [r3]
  59              	.L2:
  70:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
  71:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_Enable();
  60              		.loc 1 71 0
  61 0016 FFF7FEFF 		bl	ADC_SAR_Seq_1_Enable
  72:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
  62              		.loc 1 72 0
  63 001a BD46     		mov	sp, r7
  64              		@ sp needed
  65 001c 80BD     		pop	{r7, pc}
  66              	.L4:
  67 001e C046     		.align	2
  68              	.L3:
  69 0020 00000000 		.word	ADC_SAR_Seq_1_initVar
  70              		.cfi_endproc
  71              	.LFE2:
  72              		.size	ADC_SAR_Seq_1_Start, .-ADC_SAR_Seq_1_Start
  73              		.global	__aeabi_idiv
  74              		.section	.text.ADC_SAR_Seq_1_Init,"ax",%progbits
  75              		.align	2
  76              		.global	ADC_SAR_Seq_1_Init
  77              		.code	16
  78              		.thumb_func
  79              		.type	ADC_SAR_Seq_1_Init, %function
  80              	ADC_SAR_Seq_1_Init:
  81              	.LFB3:
  73:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  74:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  75:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
  76:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_Init
  77:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
  78:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  79:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
  80:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Initialize component's parameters to the parameters set by user in the
  81:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  customizer of the component placed onto schematic. Usually called in
  82:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Start().
  83:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  84:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
  85:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
  86:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  87:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
  88:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
  89:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  90:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global variables:
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 4


  91:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  The ADC_SAR_Seq_1_offset variable is initialized.
  92:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  93:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
  94:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_Init(void)
  95:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
  82              		.loc 1 95 0
  83              		.cfi_startproc
  84 0000 80B5     		push	{r7, lr}
  85              		.cfi_def_cfa_offset 8
  86              		.cfi_offset 7, -8
  87              		.cfi_offset 14, -4
  88 0002 84B0     		sub	sp, sp, #16
  89              		.cfi_def_cfa_offset 24
  90 0004 00AF     		add	r7, sp, #0
  91              		.cfi_def_cfa_register 7
  96:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     uint32 chNum;
  97:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     uint32 tmpRegVal;
  98:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     int32 counts;
  99:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 100:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u)
 101:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         static const uint8 CYCODE ADC_SAR_Seq_1_InputsPlacement[] =
 102:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 103:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             (uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_0_PIN
 105:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****              (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_1_PIN
 107:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 2u)
 108:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_2_PIN
 110:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 2u */
 111:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 3u)
 112:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_3_PIN
 114:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 3u */
 115:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 4u)
 116:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_4_PIN
 118:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 4u */
 119:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 5u)
 120:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_5_PIN
 122:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 5u */
 123:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 6u)
 124:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_6_PIN
 126:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 6u */
 127:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 7u)
 128:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_7_PIN
 130:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 7u */
 131:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 8u)
 132:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_8_PIN
 134:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 8u */
 135:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 9u)
 136:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_9_PORT << 4u) |
 137:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_9_PIN
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 5


 138:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 9u */
 139:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 10u)
 140:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_10_PORT << 4u) |
 141:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_10_PIN
 142:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 10u */
 143:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 11u)
 144:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_11_PORT << 4u) |
 145:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_11_PIN
 146:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 11u */
 147:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 12u)
 148:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_12_PORT << 4u) |
 149:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_12_PIN
 150:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 12u */
 151:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 13u)
 152:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_13_PORT << 4u) |
 153:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_13_PIN
 154:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 13u */
 155:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 14u)
 156:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_14_PORT << 4u) |
 157:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_14_PIN
 158:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 14u */
 159:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 15u)
 160:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_15_PORT << 4u) |
 161:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_15_PIN
 162:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 15u */
 163:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 16u)
 164:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_16_PORT << 4u) |
 165:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_16_PIN
 166:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 16u */
 167:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         };
 168:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u */
 169:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 170:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_IRQ_REMOVE == 0u)
 171:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Start and set interrupt vector */
 172:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CyIntSetPriority(ADC_SAR_Seq_1_INTC_NUMBER, ADC_SAR_Seq_1_INTC_PRIOR_NUMBER);
  92              		.loc 1 172 0
  93 0006 0F20     		mov	r0, #15
  94 0008 0321     		mov	r1, #3
  95 000a FFF7FEFF 		bl	CyIntSetPriority
 173:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         (void)CyIntSetVector(ADC_SAR_Seq_1_INTC_NUMBER, &ADC_SAR_Seq_1_ISR);
  96              		.loc 1 173 0
  97 000e 584B     		ldr	r3, .L17
  98 0010 0F20     		mov	r0, #15
  99 0012 191C     		mov	r1, r3
 100 0014 FFF7FEFF 		bl	CyIntSetVector
 174:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif   /* End ADC_SAR_Seq_1_IRQ_REMOVE */
 175:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 176:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Init SAR and MUX registers */
 177:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CHAN_EN_REG = ADC_SAR_Seq_1_DEFAULT_EN_CHANNELS;
 101              		.loc 1 177 0
 102 0018 564B     		ldr	r3, .L17+4
 103 001a 0122     		mov	r2, #1
 104 001c 1A60     		str	r2, [r3]
 178:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CTRL_REG |= ADC_SAR_Seq_1_DEFAULT_CTRL_REG_CFG | 
 179:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Enable the SAR internal pump when global pump is enabled */
 180:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         (((ADC_SAR_Seq_1_PUMP_CTRL_REG & ADC_SAR_Seq_1_PUMP_CTRL_ENABLED) != 0u) ? 
 105              		.loc 1 180 0
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 6


 106 001e 564B     		ldr	r3, .L17+8
 107 0020 1B68     		ldr	r3, [r3]
 178:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CTRL_REG |= ADC_SAR_Seq_1_DEFAULT_CTRL_REG_CFG | 
 108              		.loc 1 178 0
 109 0022 002B     		cmp	r3, #0
 110 0024 01DA     		bge	.L6
 178:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CTRL_REG |= ADC_SAR_Seq_1_DEFAULT_CTRL_REG_CFG | 
 111              		.loc 1 178 0 is_stmt 0 discriminator 1
 112 0026 5549     		ldr	r1, .L17+12
 113 0028 00E0     		b	.L7
 114              	.L6:
 178:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CTRL_REG |= ADC_SAR_Seq_1_DEFAULT_CTRL_REG_CFG | 
 115              		.loc 1 178 0 discriminator 2
 116 002a 5549     		ldr	r1, .L17+16
 117              	.L7:
 178:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CTRL_REG |= ADC_SAR_Seq_1_DEFAULT_CTRL_REG_CFG | 
 118              		.loc 1 178 0 discriminator 4
 119 002c 554B     		ldr	r3, .L17+20
 120 002e 554A     		ldr	r2, .L17+20
 121 0030 1268     		ldr	r2, [r2]
 122 0032 0A43     		orr	r2, r1
 123 0034 1A60     		str	r2, [r3]
 181:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_BOOSTPUMP_EN : 0u);
 182:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SAMPLE_CTRL_REG = ADC_SAR_Seq_1_DEFAULT_SAMPLE_CTRL_REG_CFG;
 124              		.loc 1 182 0 is_stmt 1 discriminator 4
 125 0036 544B     		ldr	r3, .L17+24
 126 0038 544A     		ldr	r2, .L17+28
 127 003a 1A60     		str	r2, [r3]
 183:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG = ADC_SAR_Seq_1_DEFAULT_RANGE_THRES_REG_CFG;
 128              		.loc 1 183 0 discriminator 4
 129 003c 544B     		ldr	r3, .L17+32
 130 003e 554A     		ldr	r2, .L17+36
 131 0040 1A60     		str	r2, [r3]
 184:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_COND_REG  = ADC_SAR_Seq_1_COMPARE_MODE;
 132              		.loc 1 184 0 discriminator 4
 133 0042 554B     		ldr	r3, .L17+40
 134 0044 0022     		mov	r2, #0
 135 0046 1A60     		str	r2, [r3]
 185:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SAMPLE_TIME01_REG = ADC_SAR_Seq_1_DEFAULT_SAMPLE_TIME01_REG_CFG;
 136              		.loc 1 185 0 discriminator 4
 137 0048 544B     		ldr	r3, .L17+44
 138 004a 554A     		ldr	r2, .L17+48
 139 004c 1A60     		str	r2, [r3]
 186:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SAMPLE_TIME23_REG = ADC_SAR_Seq_1_DEFAULT_SAMPLE_TIME23_REG_CFG;
 140              		.loc 1 186 0 discriminator 4
 141 004e 554B     		ldr	r3, .L17+52
 142 0050 554A     		ldr	r2, .L17+56
 143 0052 1A60     		str	r2, [r3]
 187:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     
 188:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 189:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_DEFAULT_MUX_SWITCH0 != 0u)
 190:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_MUX_SWITCH0_REG |= ADC_SAR_Seq_1_DEFAULT_MUX_SWITCH0;
 144              		.loc 1 190 0 discriminator 4
 145 0054 554B     		ldr	r3, .L17+60
 146 0056 554A     		ldr	r2, .L17+60
 147 0058 1268     		ldr	r2, [r2]
 148 005a 8021     		mov	r1, #128
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 7


 149 005c 4902     		lsl	r1, r1, #9
 150 005e 0A43     		orr	r2, r1
 151 0060 1A60     		str	r2, [r3]
 191:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 192:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u)
 193:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             ADC_SAR_Seq_1_MUX_SWITCH_HW_CTRL_REG |= ADC_SAR_Seq_1_DEFAULT_MUX_SWITCH0;
 194:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u */
 195:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /*ADC_SAR_Seq_1_CHANNELS_MODE !=0 */
 196:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 197:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SATURATE_INTR_MASK_REG = 0u;
 152              		.loc 1 197 0 discriminator 4
 153 0062 534B     		ldr	r3, .L17+64
 154 0064 0022     		mov	r2, #0
 155 0066 1A60     		str	r2, [r3]
 198:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_INTR_MASK_REG = 0u;
 156              		.loc 1 198 0 discriminator 4
 157 0068 524B     		ldr	r3, .L17+68
 158 006a 0022     		mov	r2, #0
 159 006c 1A60     		str	r2, [r3]
 199:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_INTR_MASK_REG = ADC_SAR_Seq_1_SAR_INTR_MASK;
 160              		.loc 1 199 0 discriminator 4
 161 006e 524B     		ldr	r3, .L17+72
 162 0070 0122     		mov	r2, #1
 163 0072 1A60     		str	r2, [r3]
 200:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 201:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_CY_SAR_IP_VER == ADC_SAR_Seq_1_CY_SAR_IP_VER0)
 202:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_ANA_TRIM_REG = ADC_SAR_Seq_1_TRIM_COEF;
 203:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* (ADC_SAR_Seq_1_CY_SAR_IP_VER == ADC_SAR_Seq_1_CY_SAR_IP_VER0) */
 204:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 205:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Read and modify default configuration based on characterization */
 206:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     tmpRegVal = ADC_SAR_Seq_1_SAR_DFT_CTRL_REG;
 164              		.loc 1 206 0 discriminator 4
 165 0074 514B     		ldr	r3, .L17+76
 166 0076 1B68     		ldr	r3, [r3]
 167 0078 7B60     		str	r3, [r7, #4]
 207:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     tmpRegVal &= (uint32)~ADC_SAR_Seq_1_DCEN;
 168              		.loc 1 207 0 discriminator 4
 169 007a 7B68     		ldr	r3, [r7, #4]
 170 007c 504A     		ldr	r2, .L17+80
 171 007e 1340     		and	r3, r2
 172 0080 7B60     		str	r3, [r7, #4]
 208:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     
 209:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_CY_SAR_IP_VER == ADC_SAR_Seq_1_CY_SAR_IP_VER0)
 210:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_NOMINAL_CLOCK_FREQ > (ADC_SAR_Seq_1_MAX_FREQUENCY / 2))
 211:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_SEL_CSEL_DFT_CHAR;
 212:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #else  /* clock speed < 9 Mhz */
 213:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_DLY_INC;
 214:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* clock speed > 9 Mhz */
 215:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #else
 216:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if ((ADC_SAR_Seq_1_DEFAULT_VREF_SEL == ADC_SAR_Seq_1__INTERNAL1024) || \
 217:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****              (ADC_SAR_Seq_1_DEFAULT_VREF_SEL == ADC_SAR_Seq_1__INTERNALVREF))
 218:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_DLY_INC;
 219:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #else
 220:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_DCEN;
 173              		.loc 1 220 0 discriminator 4
 174 0082 7B68     		ldr	r3, [r7, #4]
 175 0084 8022     		mov	r2, #128
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 8


 176 0086 9205     		lsl	r2, r2, #22
 177 0088 1343     		orr	r3, r2
 178 008a 7B60     		str	r3, [r7, #4]
 221:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal &= (uint32)~ADC_SAR_Seq_1_DLY_INC;
 179              		.loc 1 221 0 discriminator 4
 180 008c 7B68     		ldr	r3, [r7, #4]
 181 008e 0122     		mov	r2, #1
 182 0090 9343     		bic	r3, r2
 183 0092 7B60     		str	r3, [r7, #4]
 222:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ((ADC_SAR_Seq_1_DEFAULT_VREF_SEL == ADC_SAR_Seq_1__INTERNAL1024) || \
 223:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                    (ADC_SAR_Seq_1_DEFAULT_VREF_SEL == ADC_SAR_Seq_1__INTERNALVREF)) */
 224:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* (ADC_SAR_Seq_1_CY_SAR_IP_VER == ADC_SAR_Seq_1_CY_SAR_IP_VER0) */
 225:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     
 226:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_DFT_CTRL_REG = tmpRegVal;
 184              		.loc 1 226 0 discriminator 4
 185 0094 494B     		ldr	r3, .L17+76
 186 0096 7A68     		ldr	r2, [r7, #4]
 187 0098 1A60     		str	r2, [r3]
 227:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 228:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_MAX_RESOLUTION != ADC_SAR_Seq_1_RESOLUTION_12)
 229:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_WOUNDING_REG = ADC_SAR_Seq_1_ALT_WOUNDING;
 230:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* ADC_SAR_Seq_1_MAX_RESOLUTION != ADC_SAR_Seq_1_RESOLUTION_12 */
 231:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 232:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     for(chNum = 0u; chNum < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM; chNum++)
 188              		.loc 1 232 0 discriminator 4
 189 009a 0023     		mov	r3, #0
 190 009c FB60     		str	r3, [r7, #12]
 191 009e 61E0     		b	.L8
 192              	.L16:
 233:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 234:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         tmpRegVal = (ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_CHANNEL_CONFIG_MASK);
 193              		.loc 1 234 0
 194 00a0 8023     		mov	r3, #128
 195 00a2 DA00     		lsl	r2, r3, #3
 196 00a4 DC23     		mov	r3, #220
 197 00a6 9B01     		lsl	r3, r3, #6
 198 00a8 1340     		and	r3, r2
 199 00aa 7B60     		str	r3, [r7, #4]
 235:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u)
 236:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_InputsPlacement[chNum];
 237:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u */
 238:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         
 239:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         
 240:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 241:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 242:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         *  (0) and 8-bit (1) resolution.
 243:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         */
 244:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if((ADC_SAR_Seq_1_MAX_RESOLUTION != ADC_SAR_Seq_1_RESOLUTION_12) && \
 245:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             (ADC_SAR_Seq_1_ALT_WOUNDING == ADC_SAR_Seq_1_WOUNDING_10BIT))
 246:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal &= (uint32)(~ADC_SAR_Seq_1_ALT_RESOLUTION_ON);
 247:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_MAX_RESOLUTION != ADC_SAR_Seq_1_RESOLUTION_12 */
 248:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 249:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 250:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if(chNum < ADC_SAR_Seq_1_SEQUENCED_CHANNELS_NUM)
 251:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 252:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 253:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_Seq_1_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRe
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 9


 200              		.loc 1 253 0
 201 00ac FB68     		ldr	r3, [r7, #12]
 202 00ae 9B00     		lsl	r3, r3, #2
 203 00b0 444A     		ldr	r2, .L17+84
 204 00b2 9446     		mov	ip, r2
 205 00b4 6344     		add	r3, r3, ip
 206 00b6 7A68     		ldr	r2, [r7, #4]
 207 00b8 1A60     		str	r2, [r3]
 254:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 255:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_IS_SATURATE_EN_MASK) != 0u)
 208              		.loc 1 255 0
 209 00ba 8023     		mov	r3, #128
 210 00bc DB00     		lsl	r3, r3, #3
 211 00be 0122     		mov	r2, #1
 212 00c0 1340     		and	r3, r2
 213 00c2 09D0     		beq	.L9
 256:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 257:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 214              		.loc 1 257 0
 215 00c4 3A4B     		ldr	r3, .L17+64
 216 00c6 3A4A     		ldr	r2, .L17+64
 217 00c8 1268     		ldr	r2, [r2]
 218 00ca F968     		ldr	r1, [r7, #12]
 219 00cc 0120     		mov	r0, #1
 220 00ce 8840     		lsl	r0, r0, r1
 221 00d0 011C     		mov	r1, r0
 222 00d2 89B2     		uxth	r1, r1
 223 00d4 0A43     		orr	r2, r1
 224 00d6 1A60     		str	r2, [r3]
 225              	.L9:
 258:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 259:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 260:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_IS_RANGE_CTRL_EN_MASK) != 0u)
 226              		.loc 1 260 0
 227 00d8 8023     		mov	r3, #128
 228 00da DB00     		lsl	r3, r3, #3
 229 00dc 0222     		mov	r2, #2
 230 00de 1340     		and	r3, r2
 231 00e0 09D0     		beq	.L10
 261:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 262:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 232              		.loc 1 262 0
 233 00e2 344B     		ldr	r3, .L17+68
 234 00e4 334A     		ldr	r2, .L17+68
 235 00e6 1268     		ldr	r2, [r2]
 236 00e8 F968     		ldr	r1, [r7, #12]
 237 00ea 0120     		mov	r0, #1
 238 00ec 8840     		lsl	r0, r0, r1
 239 00ee 011C     		mov	r1, r0
 240 00f0 89B2     		uxth	r1, r1
 241 00f2 0A43     		orr	r2, r1
 242 00f4 1A60     		str	r2, [r3]
 243              	.L10:
 263:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 264:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 265:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 266:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             else
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 10


 267:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 268:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 CY_SET_REG32(ADC_SAR_Seq_1_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_SAR_Seq_1_INJ_T
 269:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 270:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_IS_SATURATE_EN_MASK) != 0u)
 271:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 {
 272:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                     ADC_SAR_Seq_1_SAR_INTR_MASK_REG |= ADC_SAR_Seq_1_INJ_SATURATE_MASK;
 273:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 }
 274:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 275:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_IS_RANGE_CTRL_EN_MASK) != 0
 276:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 {
 277:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                     ADC_SAR_Seq_1_SAR_INTR_MASK_REG |= ADC_SAR_Seq_1_INJ_RANGE_MASK;
 278:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 }
 279:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 280:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 281:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 282:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_ALT_RESOLUTION_ON) != 0u)
 244              		.loc 1 282 0
 245 00f6 8023     		mov	r3, #128
 246 00f8 DA00     		lsl	r2, r3, #3
 247 00fa 8023     		mov	r3, #128
 248 00fc 9B00     		lsl	r3, r3, #2
 249 00fe 1340     		and	r3, r2
 250 0100 03D0     		beq	.L11
 283:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 284:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                counts = (int32)ADC_SAR_Seq_1_DEFAULT_MAX_WRK_ALT;
 251              		.loc 1 284 0
 252 0102 8023     		mov	r3, #128
 253 0104 5B00     		lsl	r3, r3, #1
 254 0106 BB60     		str	r3, [r7, #8]
 255 0108 02E0     		b	.L12
 256              	.L11:
 285:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 286:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         else
 287:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 288:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                counts = (int32)ADC_SAR_Seq_1_SAR_WRK_MAX_12BIT;
 257              		.loc 1 288 0
 258 010a 8023     		mov	r3, #128
 259 010c 5B01     		lsl	r3, r3, #5
 260 010e BB60     		str	r3, [r7, #8]
 261              	.L12:
 289:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 290:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 291:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_DIFFERENTIAL_EN) == 0u)
 262              		.loc 1 291 0
 263 0110 8023     		mov	r3, #128
 264 0112 DA00     		lsl	r2, r3, #3
 265 0114 8023     		mov	r3, #128
 266 0116 5B00     		lsl	r3, r3, #1
 267 0118 1340     		and	r3, r2
 268 011a 05D1     		bne	.L13
 292:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 293:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if((ADC_SAR_Seq_1_DEFAULT_SE_RESULT_FORMAT_SEL == ADC_SAR_Seq_1__FSIGNED) && \
 294:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 (ADC_SAR_Seq_1_DEFAULT_NEG_INPUT_SEL == ADC_SAR_Seq_1__VREF))
 295:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 296:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_offset[chNum] = (int16)(counts / -2);
 297:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #else
 298:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_offset[chNum] = 0;
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 11


 269              		.loc 1 298 0
 270 011c 2A4B     		ldr	r3, .L17+88
 271 011e FA68     		ldr	r2, [r7, #12]
 272 0120 5200     		lsl	r2, r2, #1
 273 0122 0021     		mov	r1, #0
 274 0124 D152     		strh	r1, [r2, r3]
 275 0126 09E0     		b	.L14
 276              	.L13:
 299:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC_SAR_Seq_1__FSIGNED */
 300:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 301:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         else    /* Differential channel */
 302:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 303:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC_SAR_Seq_1__FUNSIGNED)
 304:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 /* Set offset to the half scale to convert results to signed format */
 305:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_offset[chNum] = (int16)(counts / 2);
 277              		.loc 1 305 0
 278 0128 BB68     		ldr	r3, [r7, #8]
 279 012a 002B     		cmp	r3, #0
 280 012c 00DA     		bge	.L15
 281 012e 0133     		add	r3, r3, #1
 282              	.L15:
 283 0130 5B10     		asr	r3, r3, #1
 284 0132 99B2     		uxth	r1, r3
 285 0134 244B     		ldr	r3, .L17+88
 286 0136 FA68     		ldr	r2, [r7, #12]
 287 0138 5200     		lsl	r2, r2, #1
 288 013a D152     		strh	r1, [r2, r3]
 289              	.L14:
 306:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #else
 307:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_offset[chNum] = 0;
 308:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* end ADC_SAR_Seq_1_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC_SAR_Seq_1__FUNSIGNED 
 309:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 310:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Calculate gain in counts per 10 volts with rounding */
 311:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_countsPer10Volt[chNum] = (int16)(((counts * ADC_SAR_Seq_1_10MV_COUNTS) +
 290              		.loc 1 311 0 discriminator 2
 291 013c BB68     		ldr	r3, [r7, #8]
 292 013e 234A     		ldr	r2, .L17+92
 293 0140 5343     		mul	r3, r2
 294 0142 234A     		ldr	r2, .L17+96
 295 0144 9446     		mov	ip, r2
 296 0146 6344     		add	r3, r3, ip
 312:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                             ADC_SAR_Seq_1_DEFAULT_VREF_MV_VALUE) / (ADC_SAR_Seq_1_DEFAULT_VREF_MV_V
 297              		.loc 1 312 0 discriminator 2
 298 0148 181C     		mov	r0, r3
 299 014a 2249     		ldr	r1, .L17+100
 300 014c FFF7FEFF 		bl	__aeabi_idiv
 301 0150 031C     		mov	r3, r0
 311:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                             ADC_SAR_Seq_1_DEFAULT_VREF_MV_VALUE) / (ADC_SAR_Seq_1_DEFAULT_VREF_MV_V
 302              		.loc 1 311 0 discriminator 2
 303 0152 9BB2     		uxth	r3, r3
 304 0154 19B2     		sxth	r1, r3
 305 0156 204B     		ldr	r3, .L17+104
 306 0158 FA68     		ldr	r2, [r7, #12]
 307 015a 9200     		lsl	r2, r2, #2
 308 015c D150     		str	r1, [r2, r3]
 232:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 309              		.loc 1 232 0 discriminator 2
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 12


 310 015e FB68     		ldr	r3, [r7, #12]
 311 0160 0133     		add	r3, r3, #1
 312 0162 FB60     		str	r3, [r7, #12]
 313              	.L8:
 232:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 314              		.loc 1 232 0 is_stmt 0 discriminator 1
 315 0164 FB68     		ldr	r3, [r7, #12]
 316 0166 002B     		cmp	r3, #0
 317 0168 9AD0     		beq	.L16
 313:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 314:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 318              		.loc 1 314 0 is_stmt 1
 319 016a BD46     		mov	sp, r7
 320 016c 04B0     		add	sp, sp, #16
 321              		@ sp needed
 322 016e 80BD     		pop	{r7, pc}
 323              	.L18:
 324              		.align	2
 325              	.L17:
 326 0170 00000000 		.word	ADC_SAR_Seq_1_ISR
 327 0174 20003A40 		.word	1077542944
 328 0178 80033A40 		.word	1077543808
 329 017c 70021051 		.word	1360003696
 330 0180 70020051 		.word	1358955120
 331 0184 00003A40 		.word	1077542912
 332 0188 04003A40 		.word	1077542916
 333 018c 84000080 		.word	-2147483516
 334 0190 18003A40 		.word	1077542936
 335 0194 0000FF0F 		.word	268369920
 336 0198 1C003A40 		.word	1077542940
 337 019c 10003A40 		.word	1077542928
 338 01a0 C8000200 		.word	131272
 339 01a4 14003A40 		.word	1077542932
 340 01a8 02000200 		.word	131074
 341 01ac 00033A40 		.word	1077543680
 342 01b0 28023A40 		.word	1077543464
 343 01b4 38023A40 		.word	1077543480
 344 01b8 18023A40 		.word	1077543448
 345 01bc 30003A40 		.word	1077542960
 346 01c0 FFFFFFDF 		.word	-536870913
 347 01c4 80003A40 		.word	1077543040
 348 01c8 00000000 		.word	ADC_SAR_Seq_1_offset
 349 01cc 10270000 		.word	10000
 350 01d0 E40C0000 		.word	3300
 351 01d4 C8190000 		.word	6600
 352 01d8 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 353              		.cfi_endproc
 354              	.LFE3:
 355              		.size	ADC_SAR_Seq_1_Init, .-ADC_SAR_Seq_1_Init
 356              		.section	.text.ADC_SAR_Seq_1_Enable,"ax",%progbits
 357              		.align	2
 358              		.global	ADC_SAR_Seq_1_Enable
 359              		.code	16
 360              		.thumb_func
 361              		.type	ADC_SAR_Seq_1_Enable, %function
 362              	ADC_SAR_Seq_1_Enable:
 363              	.LFB4:
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 13


 315:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 316:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 317:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_1_Enable
 318:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 319:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 320:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 321:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Enables the clock and analog power for SAR ADC.
 322:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 323:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 324:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 325:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 326:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 327:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 328:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 329:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 330:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_Enable(void)
 331:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 364              		.loc 1 331 0
 365              		.cfi_startproc
 366 0000 80B5     		push	{r7, lr}
 367              		.cfi_def_cfa_offset 8
 368              		.cfi_offset 7, -8
 369              		.cfi_offset 14, -4
 370 0002 00AF     		add	r7, sp, #0
 371              		.cfi_def_cfa_register 7
 332:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     if (0u == (ADC_SAR_Seq_1_SAR_CTRL_REG & ADC_SAR_Seq_1_ENABLE))
 372              		.loc 1 332 0
 373 0004 0A4B     		ldr	r3, .L22
 374 0006 1B68     		ldr	r3, [r3]
 375 0008 002B     		cmp	r3, #0
 376 000a 0EDB     		blt	.L19
 333:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 334:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_CY_SAR_IP_VER != ADC_SAR_Seq_1_CY_SAR_IP_VER0)
 335:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 336:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             while (0u != (ADC_SAR_Seq_1_SAR_STATUS_REG & ADC_SAR_Seq_1_STATUS_BUSY))
 377              		.loc 1 336 0
 378 000c C046     		mov	r8, r8
 379              	.L21:
 380              		.loc 1 336 0 is_stmt 0 discriminator 1
 381 000e 094B     		ldr	r3, .L22+4
 382 0010 1B68     		ldr	r3, [r3]
 383 0012 002B     		cmp	r3, #0
 384 0014 FBDB     		blt	.L21
 337:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 338:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 /* wait for SAR to go idle to avoid deadlock */
 339:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 340:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* (ADC_SAR_Seq_1_CY_SAR_IP_VER != ADC_SAR_Seq_1_CY_SAR_IP_VER0) */
 341:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         
 342:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_CTRL_REG |= ADC_SAR_Seq_1_ENABLE;
 385              		.loc 1 342 0 is_stmt 1
 386 0016 064B     		ldr	r3, .L22
 387 0018 054A     		ldr	r2, .L22
 388 001a 1268     		ldr	r2, [r2]
 389 001c 8021     		mov	r1, #128
 390 001e 0906     		lsl	r1, r1, #24
 391 0020 0A43     		orr	r2, r1
 392 0022 1A60     		str	r2, [r3]
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 14


 343:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         
 344:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 345:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CyDelayUs(ADC_SAR_Seq_1_10US_DELAY);         
 393              		.loc 1 345 0
 394 0024 0A20     		mov	r0, #10
 395 0026 FFF7FEFF 		bl	CyDelayUs
 396              	.L19:
 346:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 347:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 397              		.loc 1 347 0
 398 002a BD46     		mov	sp, r7
 399              		@ sp needed
 400 002c 80BD     		pop	{r7, pc}
 401              	.L23:
 402 002e C046     		.align	2
 403              	.L22:
 404 0030 00003A40 		.word	1077542912
 405 0034 08023A40 		.word	1077543432
 406              		.cfi_endproc
 407              	.LFE4:
 408              		.size	ADC_SAR_Seq_1_Enable, .-ADC_SAR_Seq_1_Enable
 409              		.section	.text.ADC_SAR_Seq_1_Stop,"ax",%progbits
 410              		.align	2
 411              		.global	ADC_SAR_Seq_1_Stop
 412              		.code	16
 413              		.thumb_func
 414              		.type	ADC_SAR_Seq_1_Stop, %function
 415              	ADC_SAR_Seq_1_Stop:
 416              	.LFB5:
 348:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 349:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 350:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 351:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_Stop
 352:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 353:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 354:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 355:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 356:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mode.
 357:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 358:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 359:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 360:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 361:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 362:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 363:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 364:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 365:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_Stop(void)
 366:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 417              		.loc 1 366 0
 418              		.cfi_startproc
 419 0000 80B5     		push	{r7, lr}
 420              		.cfi_def_cfa_offset 8
 421              		.cfi_offset 7, -8
 422              		.cfi_offset 14, -4
 423 0002 00AF     		add	r7, sp, #0
 424              		.cfi_def_cfa_register 7
 367:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CTRL_REG &= (uint32)~ADC_SAR_Seq_1_ENABLE;
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 15


 425              		.loc 1 367 0
 426 0004 034B     		ldr	r3, .L25
 427 0006 034A     		ldr	r2, .L25
 428 0008 1268     		ldr	r2, [r2]
 429 000a 5200     		lsl	r2, r2, #1
 430 000c 5208     		lsr	r2, r2, #1
 431 000e 1A60     		str	r2, [r3]
 368:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 432              		.loc 1 368 0
 433 0010 BD46     		mov	sp, r7
 434              		@ sp needed
 435 0012 80BD     		pop	{r7, pc}
 436              	.L26:
 437              		.align	2
 438              	.L25:
 439 0014 00003A40 		.word	1077542912
 440              		.cfi_endproc
 441              	.LFE5:
 442              		.size	ADC_SAR_Seq_1_Stop, .-ADC_SAR_Seq_1_Stop
 443              		.section	.text.ADC_SAR_Seq_1_StartConvert,"ax",%progbits
 444              		.align	2
 445              		.global	ADC_SAR_Seq_1_StartConvert
 446              		.code	16
 447              		.thumb_func
 448              		.type	ADC_SAR_Seq_1_StartConvert, %function
 449              	ADC_SAR_Seq_1_StartConvert:
 450              	.LFB6:
 369:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 370:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 371:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 372:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_StartConvert
 373:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 374:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 375:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 376:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Description:
 377:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  For free running mode, this API starts the conversion process and it
 378:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  runs continuously.
 379:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 380:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  In a triggered mode, this routine triggers every conversion by
 381:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 382:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  every conversion has to start by this API.
 383:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 384:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 385:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 386:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 387:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 388:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 389:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 390:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 391:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_StartConvert(void)
 392:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 451              		.loc 1 392 0
 452              		.cfi_startproc
 453 0000 80B5     		push	{r7, lr}
 454              		.cfi_def_cfa_offset 8
 455              		.cfi_offset 7, -8
 456              		.cfi_offset 14, -4
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 16


 457 0002 00AF     		add	r7, sp, #0
 458              		.cfi_def_cfa_register 7
 393:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_DEFAULT_SAMPLE_MODE_SEL == ADC_SAR_Seq_1__FREERUNNING)
 394:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_SAMPLE_CTRL_REG |= ADC_SAR_Seq_1_CONTINUOUS_EN;
 459              		.loc 1 394 0
 460 0004 044B     		ldr	r3, .L28
 461 0006 044A     		ldr	r2, .L28
 462 0008 1268     		ldr	r2, [r2]
 463 000a 8021     		mov	r1, #128
 464 000c 4902     		lsl	r1, r1, #9
 465 000e 0A43     		orr	r2, r1
 466 0010 1A60     		str	r2, [r3]
 395:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #else /* Firmware trigger */
 396:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_START_CTRL_REG = ADC_SAR_Seq_1_FW_TRIGGER;
 397:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* End ADC_SAR_Seq_1_DEFAULT_SAMPLE_MODE == ADC_SAR_Seq_1__FREERUNNING */
 398:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 399:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 467              		.loc 1 399 0
 468 0012 BD46     		mov	sp, r7
 469              		@ sp needed
 470 0014 80BD     		pop	{r7, pc}
 471              	.L29:
 472 0016 C046     		.align	2
 473              	.L28:
 474 0018 04003A40 		.word	1077542916
 475              		.cfi_endproc
 476              	.LFE6:
 477              		.size	ADC_SAR_Seq_1_StartConvert, .-ADC_SAR_Seq_1_StartConvert
 478              		.section	.text.ADC_SAR_Seq_1_StopConvert,"ax",%progbits
 479              		.align	2
 480              		.global	ADC_SAR_Seq_1_StopConvert
 481              		.code	16
 482              		.thumb_func
 483              		.type	ADC_SAR_Seq_1_StopConvert, %function
 484              	ADC_SAR_Seq_1_StopConvert:
 485              	.LFB7:
 400:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 401:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 402:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 403:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_StopConvert
 404:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 405:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 406:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 407:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Forces the ADC to stop all conversions.
 408:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 409:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 410:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 411:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 412:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 413:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 414:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 415:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 416:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_StopConvert(void)
 417:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 486              		.loc 1 417 0
 487              		.cfi_startproc
 488 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 17


 489              		.cfi_def_cfa_offset 8
 490              		.cfi_offset 7, -8
 491              		.cfi_offset 14, -4
 492 0002 00AF     		add	r7, sp, #0
 493              		.cfi_def_cfa_register 7
 418:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_DEFAULT_SAMPLE_MODE_SEL == ADC_SAR_Seq_1__FREERUNNING)
 419:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_SAR_Seq_1_CONTINUOUS_EN);
 494              		.loc 1 419 0
 495 0004 034B     		ldr	r3, .L31
 496 0006 034A     		ldr	r2, .L31
 497 0008 1268     		ldr	r2, [r2]
 498 000a 0349     		ldr	r1, .L31+4
 499 000c 0A40     		and	r2, r1
 500 000e 1A60     		str	r2, [r3]
 420:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* ADC_SAR_Seq_1_DEFAULT_SAMPLE_MODE == ADC_SAR_Seq_1__FREERUNNING */
 421:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 501              		.loc 1 421 0
 502 0010 BD46     		mov	sp, r7
 503              		@ sp needed
 504 0012 80BD     		pop	{r7, pc}
 505              	.L32:
 506              		.align	2
 507              	.L31:
 508 0014 04003A40 		.word	1077542916
 509 0018 FFFFFEFF 		.word	-65537
 510              		.cfi_endproc
 511              	.LFE7:
 512              		.size	ADC_SAR_Seq_1_StopConvert, .-ADC_SAR_Seq_1_StopConvert
 513              		.section	.text.ADC_SAR_Seq_1_IsEndConversion,"ax",%progbits
 514              		.align	2
 515              		.global	ADC_SAR_Seq_1_IsEndConversion
 516              		.code	16
 517              		.thumb_func
 518              		.type	ADC_SAR_Seq_1_IsEndConversion, %function
 519              	ADC_SAR_Seq_1_IsEndConversion:
 520              	.LFB8:
 422:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 423:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 424:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 425:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_IsEndConversion
 426:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 427:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 428:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 429:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Description: Checks for ADC end of conversion for the case one
 430:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  channel and end of scan for the case of multiple channels. It acts
 431:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  as a software version of the EOC. This function provides the
 432:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  programmer with two options. In one mode this function
 433:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  immediately returns with the conversion status. In the other mode,
 434:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  the function does not return (blocking) until the conversion has
 435:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  completed.
 436:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 437:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 438:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 439:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 440:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 441:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *                              for injection channel
 442:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 18


 443:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *                              channel conversion
 444:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 445:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 446:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 447:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 448:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 449:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 450:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** uint32 ADC_SAR_Seq_1_IsEndConversion(uint32 retMode)
 451:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 521              		.loc 1 451 0
 522              		.cfi_startproc
 523 0000 80B5     		push	{r7, lr}
 524              		.cfi_def_cfa_offset 8
 525              		.cfi_offset 7, -8
 526              		.cfi_offset 14, -4
 527 0002 84B0     		sub	sp, sp, #16
 528              		.cfi_def_cfa_offset 24
 529 0004 00AF     		add	r7, sp, #0
 530              		.cfi_def_cfa_register 7
 531 0006 7860     		str	r0, [r7, #4]
 452:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     uint32 status = 0u;
 532              		.loc 1 452 0
 533 0008 0023     		mov	r3, #0
 534 000a FB60     		str	r3, [r7, #12]
 453:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 454:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     if((retMode & (ADC_SAR_Seq_1_RETURN_STATUS | ADC_SAR_Seq_1_WAIT_FOR_RESULT)) != 0u)
 535              		.loc 1 454 0
 536 000c 7B68     		ldr	r3, [r7, #4]
 537 000e 0322     		mov	r2, #3
 538 0010 1340     		and	r3, r2
 539 0012 11D0     		beq	.L34
 540              	.L36:
 455:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 456:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         do
 457:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 458:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             status = ADC_SAR_Seq_1_SAR_INTR_REG & ADC_SAR_Seq_1_EOS_MASK;
 541              		.loc 1 458 0 discriminator 2
 542 0014 0B4B     		ldr	r3, .L38
 543 0016 1B68     		ldr	r3, [r3]
 544 0018 0122     		mov	r2, #1
 545 001a 1340     		and	r3, r2
 546 001c FB60     		str	r3, [r7, #12]
 459:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }while((status == 0u) && ((retMode & ADC_SAR_Seq_1_WAIT_FOR_RESULT) != 0u));
 547              		.loc 1 459 0 discriminator 2
 548 001e FB68     		ldr	r3, [r7, #12]
 549 0020 002B     		cmp	r3, #0
 550 0022 03D1     		bne	.L35
 551              		.loc 1 459 0 is_stmt 0 discriminator 1
 552 0024 7B68     		ldr	r3, [r7, #4]
 553 0026 0222     		mov	r2, #2
 554 0028 1340     		and	r3, r2
 555 002a F3D1     		bne	.L36
 556              	.L35:
 460:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 461:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if(status != 0u)
 557              		.loc 1 461 0 is_stmt 1
 558 002c FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 19


 559 002e 002B     		cmp	r3, #0
 560 0030 02D0     		beq	.L34
 462:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 463:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             /* Clear EOS bit */
 464:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             ADC_SAR_Seq_1_SAR_INTR_REG = ADC_SAR_Seq_1_EOS_MASK;
 561              		.loc 1 464 0
 562 0032 044B     		ldr	r3, .L38
 563 0034 0122     		mov	r2, #1
 564 0036 1A60     		str	r2, [r3]
 565              	.L34:
 465:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 466:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 467:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 468:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 469:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if((retMode & (ADC_SAR_Seq_1_RETURN_STATUS_INJ | ADC_SAR_Seq_1_WAIT_FOR_RESULT_INJ)) != 0u)
 470:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 471:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             do
 472:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 473:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 status |= ADC_SAR_Seq_1_SAR_INTR_REG & ADC_SAR_Seq_1_INJ_EOC_MASK;
 474:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }while(((status & ADC_SAR_Seq_1_INJ_EOC_MASK) == 0u) &&
 475:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                    ((retMode & ADC_SAR_Seq_1_WAIT_FOR_RESULT_INJ) != 0u));
 476:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 477:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((status & ADC_SAR_Seq_1_INJ_EOC_MASK) != 0u)
 478:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 479:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 /* Clear Injection EOS bit */
 480:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_SAR_INTR_REG = ADC_SAR_Seq_1_INJ_EOC_MASK;
 481:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 482:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 483:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 484:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 485:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     return (status);
 566              		.loc 1 485 0
 567 0038 FB68     		ldr	r3, [r7, #12]
 486:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 568              		.loc 1 486 0
 569 003a 181C     		mov	r0, r3
 570 003c BD46     		mov	sp, r7
 571 003e 04B0     		add	sp, sp, #16
 572              		@ sp needed
 573 0040 80BD     		pop	{r7, pc}
 574              	.L39:
 575 0042 C046     		.align	2
 576              	.L38:
 577 0044 10023A40 		.word	1077543440
 578              		.cfi_endproc
 579              	.LFE8:
 580              		.size	ADC_SAR_Seq_1_IsEndConversion, .-ADC_SAR_Seq_1_IsEndConversion
 581              		.section	.text.ADC_SAR_Seq_1_GetResult16,"ax",%progbits
 582              		.align	2
 583              		.global	ADC_SAR_Seq_1_GetResult16
 584              		.code	16
 585              		.thumb_func
 586              		.type	ADC_SAR_Seq_1_GetResult16, %function
 587              	ADC_SAR_Seq_1_GetResult16:
 588              	.LFB9:
 487:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 488:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 20


 489:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 490:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_GetResult16
 491:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 492:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 493:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 494:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Gets the data available in the SAR DATA register.
 495:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 496:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 497:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  chan: The ADC channel in which to return the result. The first channel
 498:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 499:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 500:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 501:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Returns converted data as a signed 16-bit integer
 502:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 503:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 504:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** int16 ADC_SAR_Seq_1_GetResult16(uint32 chan)
 505:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 589              		.loc 1 505 0
 590              		.cfi_startproc
 591 0000 80B5     		push	{r7, lr}
 592              		.cfi_def_cfa_offset 8
 593              		.cfi_offset 7, -8
 594              		.cfi_offset 14, -4
 595 0002 84B0     		sub	sp, sp, #16
 596              		.cfi_def_cfa_offset 24
 597 0004 00AF     		add	r7, sp, #0
 598              		.cfi_def_cfa_register 7
 599 0006 7860     		str	r0, [r7, #4]
 506:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     uint32 result;
 507:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 508:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 509:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 600              		.loc 1 509 0
 601 0008 7B68     		ldr	r3, [r7, #4]
 602 000a 002B     		cmp	r3, #0
 603 000c 02D0     		beq	.L41
 604              		.loc 1 509 0 is_stmt 0 discriminator 1
 605 000e 0020     		mov	r0, #0
 606 0010 FFF7FEFF 		bl	CyHalt
 607              	.L41:
 510:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 511:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     if(chan < ADC_SAR_Seq_1_SEQUENCED_CHANNELS_NUM)
 608              		.loc 1 511 0 is_stmt 1
 609 0014 7B68     		ldr	r3, [r7, #4]
 610 0016 002B     		cmp	r3, #0
 611 0018 09D1     		bne	.L42
 512:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 513:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_Seq_1_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) 
 612              		.loc 1 513 0
 613 001a 7B68     		ldr	r3, [r7, #4]
 614 001c 9B00     		lsl	r3, r3, #2
 615 001e 084A     		ldr	r2, .L45
 616 0020 9446     		mov	ip, r2
 617 0022 6344     		add	r3, r3, ip
 618 0024 1B68     		ldr	r3, [r3]
 619 0026 1B04     		lsl	r3, r3, #16
 620 0028 1B0C     		lsr	r3, r3, #16
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 21


 621 002a FB60     		str	r3, [r7, #12]
 622 002c 01E0     		b	.L43
 623              	.L42:
 514:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_RESULT_MASK;
 515:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 516:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     else
 517:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 518:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 519:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             result = ADC_SAR_Seq_1_SAR_INJ_RESULT_REG & ADC_SAR_Seq_1_RESULT_MASK;
 520:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #else
 521:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             result = 0u;
 624              		.loc 1 521 0
 625 002e 0023     		mov	r3, #0
 626 0030 FB60     		str	r3, [r7, #12]
 627              	.L43:
 522:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 523:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 524:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 525:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     return ( (int16)result );
 628              		.loc 1 525 0
 629 0032 FB68     		ldr	r3, [r7, #12]
 630 0034 9BB2     		uxth	r3, r3
 631 0036 1BB2     		sxth	r3, r3
 526:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 632              		.loc 1 526 0
 633 0038 181C     		mov	r0, r3
 634 003a BD46     		mov	sp, r7
 635 003c 04B0     		add	sp, sp, #16
 636              		@ sp needed
 637 003e 80BD     		pop	{r7, pc}
 638              	.L46:
 639              		.align	2
 640              	.L45:
 641 0040 80013A40 		.word	1077543296
 642              		.cfi_endproc
 643              	.LFE9:
 644              		.size	ADC_SAR_Seq_1_GetResult16, .-ADC_SAR_Seq_1_GetResult16
 645              		.section	.text.ADC_SAR_Seq_1_SetChanMask,"ax",%progbits
 646              		.align	2
 647              		.global	ADC_SAR_Seq_1_SetChanMask
 648              		.code	16
 649              		.thumb_func
 650              		.type	ADC_SAR_Seq_1_SetChanMask, %function
 651              	ADC_SAR_Seq_1_SetChanMask:
 652              	.LFB10:
 527:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 528:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 529:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 530:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetChanMask
 531:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 532:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 533:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 534:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the channel enable mask.
 535:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 536:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 537:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mask: Sets which channels that will be
 538:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  scanned. Setting bits for channels that do not exist will have no
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 22


 539:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  effect. For example, if only 6 channels were enabled, setting a
 540:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 541:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  This API will not enable the injection channel.
 542:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Examples: If the component is setup to sequence through 8
 543:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 544:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 545:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 546:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 547:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 548:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 549:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetChanMask(uint32 mask)
 550:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 653              		.loc 1 550 0
 654              		.cfi_startproc
 655 0000 80B5     		push	{r7, lr}
 656              		.cfi_def_cfa_offset 8
 657              		.cfi_offset 7, -8
 658              		.cfi_offset 14, -4
 659 0002 82B0     		sub	sp, sp, #8
 660              		.cfi_def_cfa_offset 16
 661 0004 00AF     		add	r7, sp, #0
 662              		.cfi_def_cfa_register 7
 663 0006 7860     		str	r0, [r7, #4]
 551:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CHAN_EN_REG = mask & ADC_SAR_Seq_1_MAX_CHANNELS_EN_MASK;
 664              		.loc 1 551 0
 665 0008 034B     		ldr	r3, .L48
 666 000a 7A68     		ldr	r2, [r7, #4]
 667 000c 0121     		mov	r1, #1
 668 000e 0A40     		and	r2, r1
 669 0010 1A60     		str	r2, [r3]
 552:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 670              		.loc 1 552 0
 671 0012 BD46     		mov	sp, r7
 672 0014 02B0     		add	sp, sp, #8
 673              		@ sp needed
 674 0016 80BD     		pop	{r7, pc}
 675              	.L49:
 676              		.align	2
 677              	.L48:
 678 0018 20003A40 		.word	1077542944
 679              		.cfi_endproc
 680              	.LFE10:
 681              		.size	ADC_SAR_Seq_1_SetChanMask, .-ADC_SAR_Seq_1_SetChanMask
 682              		.section	.text.ADC_SAR_Seq_1_SetLowLimit,"ax",%progbits
 683              		.align	2
 684              		.global	ADC_SAR_Seq_1_SetLowLimit
 685              		.code	16
 686              		.thumb_func
 687              		.type	ADC_SAR_Seq_1_SetLowLimit, %function
 688              	ADC_SAR_Seq_1_SetLowLimit:
 689              	.LFB11:
 553:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 554:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 555:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 556:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 557:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /*******************************************************************************
 558:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Function Name: ADC_SAR_Seq_1_EnableInjection
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 23


 559:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ********************************************************************************
 560:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 561:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Summary:
 562:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Enables the injection channel for the next scan only.
 563:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 564:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Parameters:
 565:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  None.
 566:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 567:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Return:
 568:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  None.
 569:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 570:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *******************************************************************************/
 571:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     void ADC_SAR_Seq_1_EnableInjection(void)
 572:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 573:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_INJ_CHAN_CONFIG_REG |= ADC_SAR_Seq_1_INJ_CHAN_EN;
 574:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 575:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 576:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 577:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 578:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 579:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 580:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetLowLimit
 581:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 582:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 583:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 584:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the low limit parameter for a limit condition.
 585:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 586:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 587:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  lowLimit: The low limit for a limit condition.
 588:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 589:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 590:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 591:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 592:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 593:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetLowLimit(uint32 lowLimit)
 594:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 690              		.loc 1 594 0
 691              		.cfi_startproc
 692 0000 80B5     		push	{r7, lr}
 693              		.cfi_def_cfa_offset 8
 694              		.cfi_offset 7, -8
 695              		.cfi_offset 14, -4
 696 0002 82B0     		sub	sp, sp, #8
 697              		.cfi_def_cfa_offset 16
 698 0004 00AF     		add	r7, sp, #0
 699              		.cfi_def_cfa_register 7
 700 0006 7860     		str	r0, [r7, #4]
 595:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG &= (uint32)(~ADC_SAR_Seq_1_RANGE_LOW_MASK);
 701              		.loc 1 595 0
 702 0008 084B     		ldr	r3, .L51
 703 000a 084A     		ldr	r2, .L51
 704 000c 1268     		ldr	r2, [r2]
 705 000e 120C     		lsr	r2, r2, #16
 706 0010 1204     		lsl	r2, r2, #16
 707 0012 1A60     		str	r2, [r3]
 596:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG |= lowLimit & ADC_SAR_Seq_1_RANGE_LOW_MASK;
 708              		.loc 1 596 0
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 24


 709 0014 054B     		ldr	r3, .L51
 710 0016 054A     		ldr	r2, .L51
 711 0018 1168     		ldr	r1, [r2]
 712 001a 7A68     		ldr	r2, [r7, #4]
 713 001c 1204     		lsl	r2, r2, #16
 714 001e 120C     		lsr	r2, r2, #16
 715 0020 0A43     		orr	r2, r1
 716 0022 1A60     		str	r2, [r3]
 597:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 717              		.loc 1 597 0
 718 0024 BD46     		mov	sp, r7
 719 0026 02B0     		add	sp, sp, #8
 720              		@ sp needed
 721 0028 80BD     		pop	{r7, pc}
 722              	.L52:
 723 002a C046     		.align	2
 724              	.L51:
 725 002c 18003A40 		.word	1077542936
 726              		.cfi_endproc
 727              	.LFE11:
 728              		.size	ADC_SAR_Seq_1_SetLowLimit, .-ADC_SAR_Seq_1_SetLowLimit
 729              		.section	.text.ADC_SAR_Seq_1_SetHighLimit,"ax",%progbits
 730              		.align	2
 731              		.global	ADC_SAR_Seq_1_SetHighLimit
 732              		.code	16
 733              		.thumb_func
 734              		.type	ADC_SAR_Seq_1_SetHighLimit, %function
 735              	ADC_SAR_Seq_1_SetHighLimit:
 736              	.LFB12:
 598:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 599:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 600:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 601:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetHighLimit
 602:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 603:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 604:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 605:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the low limit parameter for a limit condition.
 606:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 607:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 608:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  highLimit: The high limit for a limit condition.
 609:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 610:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 611:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 612:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 613:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 614:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetHighLimit(uint32 highLimit)
 615:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 737              		.loc 1 615 0
 738              		.cfi_startproc
 739 0000 80B5     		push	{r7, lr}
 740              		.cfi_def_cfa_offset 8
 741              		.cfi_offset 7, -8
 742              		.cfi_offset 14, -4
 743 0002 82B0     		sub	sp, sp, #8
 744              		.cfi_def_cfa_offset 16
 745 0004 00AF     		add	r7, sp, #0
 746              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 25


 747 0006 7860     		str	r0, [r7, #4]
 616:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG &= (uint32)(~ADC_SAR_Seq_1_RANGE_HIGH_MASK);
 748              		.loc 1 616 0
 749 0008 074B     		ldr	r3, .L54
 750 000a 074A     		ldr	r2, .L54
 751 000c 1268     		ldr	r2, [r2]
 752 000e 1204     		lsl	r2, r2, #16
 753 0010 120C     		lsr	r2, r2, #16
 754 0012 1A60     		str	r2, [r3]
 617:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_SAR_Seq_1_RANGE_HIGH_OFFSET);
 755              		.loc 1 617 0
 756 0014 044B     		ldr	r3, .L54
 757 0016 044A     		ldr	r2, .L54
 758 0018 1168     		ldr	r1, [r2]
 759 001a 7A68     		ldr	r2, [r7, #4]
 760 001c 1204     		lsl	r2, r2, #16
 761 001e 0A43     		orr	r2, r1
 762 0020 1A60     		str	r2, [r3]
 618:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 763              		.loc 1 618 0
 764 0022 BD46     		mov	sp, r7
 765 0024 02B0     		add	sp, sp, #8
 766              		@ sp needed
 767 0026 80BD     		pop	{r7, pc}
 768              	.L55:
 769              		.align	2
 770              	.L54:
 771 0028 18003A40 		.word	1077542936
 772              		.cfi_endproc
 773              	.LFE12:
 774              		.size	ADC_SAR_Seq_1_SetHighLimit, .-ADC_SAR_Seq_1_SetHighLimit
 775              		.section	.text.ADC_SAR_Seq_1_SetLimitMask,"ax",%progbits
 776              		.align	2
 777              		.global	ADC_SAR_Seq_1_SetLimitMask
 778              		.code	16
 779              		.thumb_func
 780              		.type	ADC_SAR_Seq_1_SetLimitMask, %function
 781              	ADC_SAR_Seq_1_SetLimitMask:
 782              	.LFB13:
 619:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 620:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 621:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 622:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetLimitMask
 623:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 624:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 625:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 626:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the channel limit condition mask.
 627:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 628:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 629:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mask: Sets which channels that may cause a
 630:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 631:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  will have no effect. For example, if only 6 channels were enabled,
 632:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 633:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 634:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 635:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 636:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 26


 637:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 638:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetLimitMask(uint32 mask)
 639:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 783              		.loc 1 639 0
 784              		.cfi_startproc
 785 0000 80B5     		push	{r7, lr}
 786              		.cfi_def_cfa_offset 8
 787              		.cfi_offset 7, -8
 788              		.cfi_offset 14, -4
 789 0002 82B0     		sub	sp, sp, #8
 790              		.cfi_def_cfa_offset 16
 791 0004 00AF     		add	r7, sp, #0
 792              		.cfi_def_cfa_register 7
 793 0006 7860     		str	r0, [r7, #4]
 640:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_INTR_MASK_REG = mask & ADC_SAR_Seq_1_MAX_CHANNELS_EN_MASK;
 794              		.loc 1 640 0
 795 0008 034B     		ldr	r3, .L57
 796 000a 7A68     		ldr	r2, [r7, #4]
 797 000c 0121     		mov	r1, #1
 798 000e 0A40     		and	r2, r1
 799 0010 1A60     		str	r2, [r3]
 641:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 800              		.loc 1 641 0
 801 0012 BD46     		mov	sp, r7
 802 0014 02B0     		add	sp, sp, #8
 803              		@ sp needed
 804 0016 80BD     		pop	{r7, pc}
 805              	.L58:
 806              		.align	2
 807              	.L57:
 808 0018 38023A40 		.word	1077543480
 809              		.cfi_endproc
 810              	.LFE13:
 811              		.size	ADC_SAR_Seq_1_SetLimitMask, .-ADC_SAR_Seq_1_SetLimitMask
 812              		.section	.text.ADC_SAR_Seq_1_SetSatMask,"ax",%progbits
 813              		.align	2
 814              		.global	ADC_SAR_Seq_1_SetSatMask
 815              		.code	16
 816              		.thumb_func
 817              		.type	ADC_SAR_Seq_1_SetSatMask, %function
 818              	ADC_SAR_Seq_1_SetSatMask:
 819              	.LFB14:
 642:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 643:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 644:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 645:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetSatMask
 646:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 647:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 648:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 649:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the channel saturation event mask.
 650:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 651:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 652:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mask: Sets which channels that may cause a
 653:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 654:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  will have no effect. For example, if only 8 channels were enabled,
 655:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 656:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 27


 657:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 658:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 659:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 660:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 661:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetSatMask(uint32 mask)
 662:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 820              		.loc 1 662 0
 821              		.cfi_startproc
 822 0000 80B5     		push	{r7, lr}
 823              		.cfi_def_cfa_offset 8
 824              		.cfi_offset 7, -8
 825              		.cfi_offset 14, -4
 826 0002 82B0     		sub	sp, sp, #8
 827              		.cfi_def_cfa_offset 16
 828 0004 00AF     		add	r7, sp, #0
 829              		.cfi_def_cfa_register 7
 830 0006 7860     		str	r0, [r7, #4]
 663:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SATURATE_INTR_MASK_REG = mask & ADC_SAR_Seq_1_MAX_CHANNELS_EN_MASK;
 831              		.loc 1 663 0
 832 0008 034B     		ldr	r3, .L60
 833 000a 7A68     		ldr	r2, [r7, #4]
 834 000c 0121     		mov	r1, #1
 835 000e 0A40     		and	r2, r1
 836 0010 1A60     		str	r2, [r3]
 664:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 837              		.loc 1 664 0
 838 0012 BD46     		mov	sp, r7
 839 0014 02B0     		add	sp, sp, #8
 840              		@ sp needed
 841 0016 80BD     		pop	{r7, pc}
 842              	.L61:
 843              		.align	2
 844              	.L60:
 845 0018 28023A40 		.word	1077543464
 846              		.cfi_endproc
 847              	.LFE14:
 848              		.size	ADC_SAR_Seq_1_SetSatMask, .-ADC_SAR_Seq_1_SetSatMask
 849              		.section	.text.ADC_SAR_Seq_1_SetOffset,"ax",%progbits
 850              		.align	2
 851              		.global	ADC_SAR_Seq_1_SetOffset
 852              		.code	16
 853              		.thumb_func
 854              		.type	ADC_SAR_Seq_1_SetOffset, %function
 855              	ADC_SAR_Seq_1_SetOffset:
 856              	.LFB15:
 665:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 666:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 667:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 668:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetOffset
 669:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 670:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 671:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 672:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   Description: Sets the ADC offset which is used by the functions
 673:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 674:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   to substract the offset from the given reading
 675:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   before calculating the voltage conversion.
 676:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 28


 677:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 678:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  chan: ADC channel number.
 679:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  offset: This value is a measured value when the
 680:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *          inputs are shorted or connected to the same input voltage.
 681:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 682:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 683:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 684:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 685:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global variables:
 686:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Offset:  Modified to set the user provided offset.
 687:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 688:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 689:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetOffset(uint32 chan, int16 offset)
 690:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 857              		.loc 1 690 0
 858              		.cfi_startproc
 859 0000 80B5     		push	{r7, lr}
 860              		.cfi_def_cfa_offset 8
 861              		.cfi_offset 7, -8
 862              		.cfi_offset 14, -4
 863 0002 82B0     		sub	sp, sp, #8
 864              		.cfi_def_cfa_offset 16
 865 0004 00AF     		add	r7, sp, #0
 866              		.cfi_def_cfa_register 7
 867 0006 7860     		str	r0, [r7, #4]
 868 0008 0A1C     		mov	r2, r1
 869 000a BB1C     		add	r3, r7, #2
 870 000c 1A80     		strh	r2, [r3]
 691:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 692:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 871              		.loc 1 692 0
 872 000e 7B68     		ldr	r3, [r7, #4]
 873 0010 002B     		cmp	r3, #0
 874 0012 02D0     		beq	.L63
 875              		.loc 1 692 0 is_stmt 0 discriminator 1
 876 0014 0020     		mov	r0, #0
 877 0016 FFF7FEFF 		bl	CyHalt
 878              	.L63:
 693:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 694:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_offset[chan] = offset;
 879              		.loc 1 694 0 is_stmt 1
 880 001a 044B     		ldr	r3, .L64
 881 001c 7A68     		ldr	r2, [r7, #4]
 882 001e 5200     		lsl	r2, r2, #1
 883 0020 B91C     		add	r1, r7, #2
 884 0022 0988     		ldrh	r1, [r1]
 885 0024 D152     		strh	r1, [r2, r3]
 695:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 886              		.loc 1 695 0
 887 0026 BD46     		mov	sp, r7
 888 0028 02B0     		add	sp, sp, #8
 889              		@ sp needed
 890 002a 80BD     		pop	{r7, pc}
 891              	.L65:
 892              		.align	2
 893              	.L64:
 894 002c 00000000 		.word	ADC_SAR_Seq_1_offset
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 29


 895              		.cfi_endproc
 896              	.LFE15:
 897              		.size	ADC_SAR_Seq_1_SetOffset, .-ADC_SAR_Seq_1_SetOffset
 898              		.section	.text.ADC_SAR_Seq_1_SetGain,"ax",%progbits
 899              		.align	2
 900              		.global	ADC_SAR_Seq_1_SetGain
 901              		.code	16
 902              		.thumb_func
 903              		.type	ADC_SAR_Seq_1_SetGain, %function
 904              	ADC_SAR_Seq_1_SetGain:
 905              	.LFB16:
 696:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 697:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 698:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 699:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetGain
 700:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 701:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 702:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 703:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 704:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  conversion functions below. This value is set by default by the
 705:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  reference and input range settings. It should only be used to further
 706:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  calibrate the ADC with a known input or if an external reference is
 707:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 708:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 709:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  conversion between ADC counts and voltage.
 710:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 711:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 712:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  chan: ADC channel number.
 713:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  adcGain: ADC gain in counts per 10 volts.
 714:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 715:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 716:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 717:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 718:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global variables:
 719:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_CountsPer10Volt:  modified to set the ADC gain in counts
 720:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   per 10 volt.
 721:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 722:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 723:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetGain(uint32 chan, int32 adcGain)
 724:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 906              		.loc 1 724 0
 907              		.cfi_startproc
 908 0000 80B5     		push	{r7, lr}
 909              		.cfi_def_cfa_offset 8
 910              		.cfi_offset 7, -8
 911              		.cfi_offset 14, -4
 912 0002 82B0     		sub	sp, sp, #8
 913              		.cfi_def_cfa_offset 16
 914 0004 00AF     		add	r7, sp, #0
 915              		.cfi_def_cfa_register 7
 916 0006 7860     		str	r0, [r7, #4]
 917 0008 3960     		str	r1, [r7]
 725:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 726:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 918              		.loc 1 726 0
 919 000a 7B68     		ldr	r3, [r7, #4]
 920 000c 002B     		cmp	r3, #0
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 30


 921 000e 02D0     		beq	.L67
 922              		.loc 1 726 0 is_stmt 0 discriminator 1
 923 0010 0020     		mov	r0, #0
 924 0012 FFF7FEFF 		bl	CyHalt
 925              	.L67:
 727:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 728:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_countsPer10Volt[chan] = adcGain;
 926              		.loc 1 728 0 is_stmt 1
 927 0016 044B     		ldr	r3, .L68
 928 0018 7A68     		ldr	r2, [r7, #4]
 929 001a 9200     		lsl	r2, r2, #2
 930 001c 3968     		ldr	r1, [r7]
 931 001e D150     		str	r1, [r2, r3]
 729:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 932              		.loc 1 729 0
 933 0020 BD46     		mov	sp, r7
 934 0022 02B0     		add	sp, sp, #8
 935              		@ sp needed
 936 0024 80BD     		pop	{r7, pc}
 937              	.L69:
 938 0026 C046     		.align	2
 939              	.L68:
 940 0028 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 941              		.cfi_endproc
 942              	.LFE16:
 943              		.size	ADC_SAR_Seq_1_SetGain, .-ADC_SAR_Seq_1_SetGain
 944              		.section	.text.ADC_SAR_Seq_1_CountsTo_mVolts,"ax",%progbits
 945              		.align	2
 946              		.global	ADC_SAR_Seq_1_CountsTo_mVolts
 947              		.code	16
 948              		.thumb_func
 949              		.type	ADC_SAR_Seq_1_CountsTo_mVolts, %function
 950              	ADC_SAR_Seq_1_CountsTo_mVolts:
 951              	.LFB17:
 730:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 731:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 732:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** #if(ADC_SAR_Seq_1_DEFAULT_JUSTIFICATION_SEL == ADC_SAR_Seq_1__RIGHT)
 733:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 734:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 735:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /*******************************************************************************
 736:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Function Name: ADC_SAR_Seq_1_CountsTo_mVolts
 737:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ********************************************************************************
 738:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 739:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Summary:
 740:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function converts ADC counts to mVolts
 741:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function is not available when left data format justification selected.
 742:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 743:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Parameters:
 744:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  chan: The ADC channel number.
 745:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  adcCounts: Result from the ADC conversion
 746:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 747:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Return:
 748:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Results in mVolts
 749:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 750:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Global variables:
 751:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_countsPer10Volt:  used to convert ADC counts to mVolts.
 752:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_Offset:  Used as the offset while converting ADC counts
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 31


 753:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *   to mVolts.
 754:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 755:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *******************************************************************************/
 756:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     int16 ADC_SAR_Seq_1_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 757:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 952              		.loc 1 757 0
 953              		.cfi_startproc
 954 0000 80B5     		push	{r7, lr}
 955              		.cfi_def_cfa_offset 8
 956              		.cfi_offset 7, -8
 957              		.cfi_offset 14, -4
 958 0002 84B0     		sub	sp, sp, #16
 959              		.cfi_def_cfa_offset 24
 960 0004 00AF     		add	r7, sp, #0
 961              		.cfi_def_cfa_register 7
 962 0006 7860     		str	r0, [r7, #4]
 963 0008 0A1C     		mov	r2, r1
 964 000a BB1C     		add	r3, r7, #2
 965 000c 1A80     		strh	r2, [r3]
 758:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         int16 mVolts;
 759:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 760:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 761:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 966              		.loc 1 761 0
 967 000e 7B68     		ldr	r3, [r7, #4]
 968 0010 002B     		cmp	r3, #0
 969 0012 02D0     		beq	.L71
 970              		.loc 1 761 0 is_stmt 0 discriminator 1
 971 0014 0020     		mov	r0, #0
 972 0016 FFF7FEFF 		bl	CyHalt
 973              	.L71:
 762:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 763:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 764:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE)
 765:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chan] & ADC_SAR_Seq_1_AVERAGING_EN) != 0u)
 766:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 767:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 adcCounts /= ADC_SAR_Seq_1_DEFAULT_AVG_SAMPLES_DIV;
 768:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 769:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE */
 770:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 771:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Subtract ADC offset */
 772:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         adcCounts -= ADC_SAR_Seq_1_offset[chan];
 974              		.loc 1 772 0 is_stmt 1
 975 001a 1F4B     		ldr	r3, .L77
 976 001c 7A68     		ldr	r2, [r7, #4]
 977 001e 5200     		lsl	r2, r2, #1
 978 0020 D35A     		ldrh	r3, [r2, r3]
 979 0022 99B2     		uxth	r1, r3
 980 0024 BB1C     		add	r3, r7, #2
 981 0026 1A88     		ldrh	r2, [r3]
 982 0028 8BB2     		uxth	r3, r1
 983 002a D31A     		sub	r3, r2, r3
 984 002c 9AB2     		uxth	r2, r3
 985 002e BB1C     		add	r3, r7, #2
 986 0030 1A80     		strh	r2, [r3]
 773:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 774:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         mVolts = (int16)((((int32)adcCounts * ADC_SAR_Seq_1_10MV_COUNTS) + ( (adcCounts > 0) ?
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 32


 987              		.loc 1 774 0
 988 0032 BB1C     		add	r3, r7, #2
 989 0034 0022     		mov	r2, #0
 990 0036 9B5E     		ldrsh	r3, [r3, r2]
 991 0038 184A     		ldr	r2, .L77+4
 992 003a 5A43     		mul	r2, r3
 775:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (ADC_SAR_Seq_1_countsPer10Volt[chan] / 2) : (-(ADC_SAR_Seq_1_countsPer10Volt[chan]
 993              		.loc 1 775 0
 994 003c BB1C     		add	r3, r7, #2
 995 003e 0021     		mov	r1, #0
 996 0040 5B5E     		ldrsh	r3, [r3, r1]
 997 0042 002B     		cmp	r3, #0
 998 0044 08DD     		ble	.L72
 999              		.loc 1 775 0 is_stmt 0 discriminator 1
 1000 0046 164B     		ldr	r3, .L77+8
 1001 0048 7968     		ldr	r1, [r7, #4]
 1002 004a 8900     		lsl	r1, r1, #2
 1003 004c CB58     		ldr	r3, [r1, r3]
 1004 004e 002B     		cmp	r3, #0
 1005 0050 00DA     		bge	.L73
 1006 0052 0133     		add	r3, r3, #1
 1007              	.L73:
 1008 0054 5B10     		asr	r3, r3, #1
 1009 0056 08E0     		b	.L74
 1010              	.L72:
 1011              		.loc 1 775 0 discriminator 2
 1012 0058 114B     		ldr	r3, .L77+8
 1013 005a 7968     		ldr	r1, [r7, #4]
 1014 005c 8900     		lsl	r1, r1, #2
 1015 005e CB58     		ldr	r3, [r1, r3]
 1016 0060 002B     		cmp	r3, #0
 1017 0062 00DA     		bge	.L75
 1018 0064 0133     		add	r3, r3, #1
 1019              	.L75:
 1020 0066 5B10     		asr	r3, r3, #1
 1021 0068 5B42     		neg	r3, r3
 1022              	.L74:
 774:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (ADC_SAR_Seq_1_countsPer10Volt[chan] / 2) : (-(ADC_SAR_Seq_1_countsPer10Volt[chan]
 1023              		.loc 1 774 0 is_stmt 1
 1024 006a D118     		add	r1, r2, r3
 776:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  / ADC_SAR_Seq_1_countsPer10Volt[chan]);
 1025              		.loc 1 776 0
 1026 006c 0C4B     		ldr	r3, .L77+8
 1027 006e 7A68     		ldr	r2, [r7, #4]
 1028 0070 9200     		lsl	r2, r2, #2
 1029 0072 D358     		ldr	r3, [r2, r3]
 1030 0074 081C     		mov	r0, r1
 1031 0076 191C     		mov	r1, r3
 1032 0078 FFF7FEFF 		bl	__aeabi_idiv
 1033 007c 031C     		mov	r3, r0
 1034 007e 1A1C     		mov	r2, r3
 774:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (ADC_SAR_Seq_1_countsPer10Volt[chan] / 2) : (-(ADC_SAR_Seq_1_countsPer10Volt[chan]
 1035              		.loc 1 774 0
 1036 0080 0E23     		mov	r3, #14
 1037 0082 FB18     		add	r3, r7, r3
 1038 0084 1A80     		strh	r2, [r3]
 777:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 33


 778:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         return( mVolts );
 1039              		.loc 1 778 0
 1040 0086 0E23     		mov	r3, #14
 1041 0088 FB18     		add	r3, r7, r3
 1042 008a 1B88     		ldrh	r3, [r3]
 1043 008c 1BB2     		sxth	r3, r3
 779:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 1044              		.loc 1 779 0
 1045 008e 181C     		mov	r0, r3
 1046 0090 BD46     		mov	sp, r7
 1047 0092 04B0     		add	sp, sp, #16
 1048              		@ sp needed
 1049 0094 80BD     		pop	{r7, pc}
 1050              	.L78:
 1051 0096 C046     		.align	2
 1052              	.L77:
 1053 0098 00000000 		.word	ADC_SAR_Seq_1_offset
 1054 009c 10270000 		.word	10000
 1055 00a0 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 1056              		.cfi_endproc
 1057              	.LFE17:
 1058              		.size	ADC_SAR_Seq_1_CountsTo_mVolts, .-ADC_SAR_Seq_1_CountsTo_mVolts
 1059              		.global	__aeabi_lmul
 1060              		.global	__aeabi_ldivmod
 1061              		.section	.text.ADC_SAR_Seq_1_CountsTo_uVolts,"ax",%progbits
 1062              		.align	2
 1063              		.global	ADC_SAR_Seq_1_CountsTo_uVolts
 1064              		.code	16
 1065              		.thumb_func
 1066              		.type	ADC_SAR_Seq_1_CountsTo_uVolts, %function
 1067              	ADC_SAR_Seq_1_CountsTo_uVolts:
 1068              	.LFB18:
 780:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 781:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 782:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /*******************************************************************************
 783:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Function Name: ADC_SAR_Seq_1_CountsTo_uVolts
 784:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ********************************************************************************
 785:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 786:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Summary:
 787:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function converts ADC counts to micro Volts
 788:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function is not available when left data format justification selected.
 789:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 790:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Parameters:
 791:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  chan: The ADC channel number.
 792:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  adcCounts: Result from the ADC conversion
 793:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 794:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Return:
 795:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Results in uVolts
 796:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 797:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Global variables:
 798:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_countsPer10Volt:  used to convert ADC counts to uVolts.
 799:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_Offset:  Used as the offset while converting ADC counts
 800:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *   to mVolts.
 801:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 802:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Theory:
 803:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 804:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  number in the conversion to uVolts and at the same time not loose
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 34


 805:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  resolution.
 806:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 807:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  on 10 million and later divide on gain in counts per 10V.
 808:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 809:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *******************************************************************************/
 810:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     int32 ADC_SAR_Seq_1_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 811:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 1069              		.loc 1 811 0
 1070              		.cfi_startproc
 1071 0000 B0B5     		push	{r4, r5, r7, lr}
 1072              		.cfi_def_cfa_offset 16
 1073              		.cfi_offset 4, -16
 1074              		.cfi_offset 5, -12
 1075              		.cfi_offset 7, -8
 1076              		.cfi_offset 14, -4
 1077 0002 86B0     		sub	sp, sp, #24
 1078              		.cfi_def_cfa_offset 40
 1079 0004 00AF     		add	r7, sp, #0
 1080              		.cfi_def_cfa_register 7
 1081 0006 F860     		str	r0, [r7, #12]
 1082 0008 0A1C     		mov	r2, r1
 1083 000a 0A23     		mov	r3, #10
 1084 000c FB18     		add	r3, r7, r3
 1085 000e 1A80     		strh	r2, [r3]
 812:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         int64 uVolts;
 813:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 814:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 815:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 1086              		.loc 1 815 0
 1087 0010 FB68     		ldr	r3, [r7, #12]
 1088 0012 002B     		cmp	r3, #0
 1089 0014 02D0     		beq	.L80
 1090              		.loc 1 815 0 is_stmt 0 discriminator 1
 1091 0016 0020     		mov	r0, #0
 1092 0018 FFF7FEFF 		bl	CyHalt
 1093              	.L80:
 816:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 817:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 818:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE)
 819:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chan] & ADC_SAR_Seq_1_AVERAGING_EN) != 0u)
 820:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 821:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 adcCounts /= ADC_SAR_Seq_1_DEFAULT_AVG_SAMPLES_DIV;
 822:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 823:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE */
 824:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 825:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Subtract ADC offset */
 826:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         adcCounts -= ADC_SAR_Seq_1_offset[chan];
 1094              		.loc 1 826 0 is_stmt 1
 1095 001c 194B     		ldr	r3, .L82
 1096 001e FA68     		ldr	r2, [r7, #12]
 1097 0020 5200     		lsl	r2, r2, #1
 1098 0022 D35A     		ldrh	r3, [r2, r3]
 1099 0024 99B2     		uxth	r1, r3
 1100 0026 0A23     		mov	r3, #10
 1101 0028 FB18     		add	r3, r7, r3
 1102 002a 1A88     		ldrh	r2, [r3]
 1103 002c 8BB2     		uxth	r3, r1
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 35


 1104 002e D31A     		sub	r3, r2, r3
 1105 0030 9AB2     		uxth	r2, r3
 1106 0032 0A23     		mov	r3, #10
 1107 0034 FB18     		add	r3, r7, r3
 1108 0036 1A80     		strh	r2, [r3]
 827:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 828:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         uVolts = ((int64)adcCounts * ADC_SAR_Seq_1_10UV_COUNTS) / ADC_SAR_Seq_1_countsPer10Volt[cha
 1109              		.loc 1 828 0
 1110 0038 0A23     		mov	r3, #10
 1111 003a FB18     		add	r3, r7, r3
 1112 003c 1B88     		ldrh	r3, [r3]
 1113 003e 1BB2     		sxth	r3, r3
 1114 0040 3B60     		str	r3, [r7]
 1115 0042 DB17     		asr	r3, r3, #31
 1116 0044 7B60     		str	r3, [r7, #4]
 1117 0046 3868     		ldr	r0, [r7]
 1118 0048 7968     		ldr	r1, [r7, #4]
 1119 004a 0F4A     		ldr	r2, .L82+4
 1120 004c 0023     		mov	r3, #0
 1121 004e FFF7FEFF 		bl	__aeabi_lmul
 1122 0052 021C     		mov	r2, r0
 1123 0054 0B1C     		mov	r3, r1
 1124 0056 101C     		mov	r0, r2
 1125 0058 191C     		mov	r1, r3
 1126 005a 0C4B     		ldr	r3, .L82+8
 1127 005c FA68     		ldr	r2, [r7, #12]
 1128 005e 9200     		lsl	r2, r2, #2
 1129 0060 D358     		ldr	r3, [r2, r3]
 1130 0062 1C1C     		mov	r4, r3
 1131 0064 DB17     		asr	r3, r3, #31
 1132 0066 1D1C     		mov	r5, r3
 1133 0068 221C     		mov	r2, r4
 1134 006a 2B1C     		mov	r3, r5
 1135 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1136 0070 031C     		mov	r3, r0
 1137 0072 0C1C     		mov	r4, r1
 1138 0074 3B61     		str	r3, [r7, #16]
 1139 0076 7C61     		str	r4, [r7, #20]
 829:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 830:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         return( (int32)uVolts );
 1140              		.loc 1 830 0
 1141 0078 3B69     		ldr	r3, [r7, #16]
 831:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 1142              		.loc 1 831 0
 1143 007a 181C     		mov	r0, r3
 1144 007c BD46     		mov	sp, r7
 1145 007e 06B0     		add	sp, sp, #24
 1146              		@ sp needed
 1147 0080 B0BD     		pop	{r4, r5, r7, pc}
 1148              	.L83:
 1149 0082 C046     		.align	2
 1150              	.L82:
 1151 0084 00000000 		.word	ADC_SAR_Seq_1_offset
 1152 0088 80969800 		.word	10000000
 1153 008c 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 1154              		.cfi_endproc
 1155              	.LFE18:
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 36


 1156              		.size	ADC_SAR_Seq_1_CountsTo_uVolts, .-ADC_SAR_Seq_1_CountsTo_uVolts
 1157              		.global	__aeabi_i2f
 1158              		.global	__aeabi_fmul
 1159              		.global	__aeabi_fdiv
 1160              		.section	.text.ADC_SAR_Seq_1_CountsTo_Volts,"ax",%progbits
 1161              		.align	2
 1162              		.global	ADC_SAR_Seq_1_CountsTo_Volts
 1163              		.code	16
 1164              		.thumb_func
 1165              		.type	ADC_SAR_Seq_1_CountsTo_Volts, %function
 1166              	ADC_SAR_Seq_1_CountsTo_Volts:
 1167              	.LFB19:
 832:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 833:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 834:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /*******************************************************************************
 835:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Function Name: ADC_SAR_Seq_1_CountsTo_Volts
 836:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ********************************************************************************
 837:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 838:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Summary:
 839:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Converts the ADC output to Volts as a floating point number.
 840:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function is not available when left data format justification selected.
 841:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 842:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Parameters:
 843:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  chan: The ADC channel number.
 844:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Result from the ADC conversion
 845:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 846:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Return:
 847:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Results in Volts
 848:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 849:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Global variables:
 850:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_countsPer10Volt:  used to convert ADC counts to Volts.
 851:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_Offset:  Used as the offset while converting ADC counts
 852:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *   to mVolts.
 853:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 854:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *******************************************************************************/
 855:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     float32 ADC_SAR_Seq_1_CountsTo_Volts(uint32 chan, int16 adcCounts)
 856:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 1168              		.loc 1 856 0
 1169              		.cfi_startproc
 1170 0000 90B5     		push	{r4, r7, lr}
 1171              		.cfi_def_cfa_offset 12
 1172              		.cfi_offset 4, -12
 1173              		.cfi_offset 7, -8
 1174              		.cfi_offset 14, -4
 1175 0002 85B0     		sub	sp, sp, #20
 1176              		.cfi_def_cfa_offset 32
 1177 0004 00AF     		add	r7, sp, #0
 1178              		.cfi_def_cfa_register 7
 1179 0006 7860     		str	r0, [r7, #4]
 1180 0008 0A1C     		mov	r2, r1
 1181 000a BB1C     		add	r3, r7, #2
 1182 000c 1A80     		strh	r2, [r3]
 857:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         float32 volts;
 858:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 859:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 860:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 1183              		.loc 1 860 0
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 37


 1184 000e 7B68     		ldr	r3, [r7, #4]
 1185 0010 002B     		cmp	r3, #0
 1186 0012 02D0     		beq	.L85
 1187              		.loc 1 860 0 is_stmt 0 discriminator 1
 1188 0014 0020     		mov	r0, #0
 1189 0016 FFF7FEFF 		bl	CyHalt
 1190              	.L85:
 861:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 862:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 863:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE)
 864:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chan] & ADC_SAR_Seq_1_AVERAGING_EN) != 0u)
 865:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 866:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 adcCounts /= ADC_SAR_Seq_1_DEFAULT_AVG_SAMPLES_DIV;
 867:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 868:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE */
 869:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 870:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Subtract ADC offset */
 871:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         adcCounts -= ADC_SAR_Seq_1_offset[chan];
 1191              		.loc 1 871 0 is_stmt 1
 1192 001a 164B     		ldr	r3, .L87
 1193 001c 7A68     		ldr	r2, [r7, #4]
 1194 001e 5200     		lsl	r2, r2, #1
 1195 0020 D35A     		ldrh	r3, [r2, r3]
 1196 0022 99B2     		uxth	r1, r3
 1197 0024 BB1C     		add	r3, r7, #2
 1198 0026 1A88     		ldrh	r2, [r3]
 1199 0028 8BB2     		uxth	r3, r1
 1200 002a D31A     		sub	r3, r2, r3
 1201 002c 9AB2     		uxth	r2, r3
 1202 002e BB1C     		add	r3, r7, #2
 1203 0030 1A80     		strh	r2, [r3]
 872:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 873:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         volts = ((float32)adcCounts * ADC_SAR_Seq_1_10V_COUNTS) / (float32)ADC_SAR_Seq_1_countsPer1
 1204              		.loc 1 873 0
 1205 0032 BB1C     		add	r3, r7, #2
 1206 0034 0022     		mov	r2, #0
 1207 0036 9B5E     		ldrsh	r3, [r3, r2]
 1208 0038 181C     		mov	r0, r3
 1209 003a FFF7FEFF 		bl	__aeabi_i2f
 1210 003e 031C     		add	r3, r0, #0
 1211 0040 181C     		add	r0, r3, #0
 1212 0042 0D49     		ldr	r1, .L87+4
 1213 0044 FFF7FEFF 		bl	__aeabi_fmul
 1214 0048 031C     		add	r3, r0, #0
 1215 004a 1C1C     		add	r4, r3, #0
 1216 004c 0B4B     		ldr	r3, .L87+8
 1217 004e 7A68     		ldr	r2, [r7, #4]
 1218 0050 9200     		lsl	r2, r2, #2
 1219 0052 D358     		ldr	r3, [r2, r3]
 1220 0054 181C     		mov	r0, r3
 1221 0056 FFF7FEFF 		bl	__aeabi_i2f
 1222 005a 031C     		add	r3, r0, #0
 1223 005c 201C     		add	r0, r4, #0
 1224 005e 191C     		add	r1, r3, #0
 1225 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1226 0064 031C     		add	r3, r0, #0
 1227 0066 FB60     		str	r3, [r7, #12]
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 38


 874:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 875:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         return( volts );
 1228              		.loc 1 875 0
 1229 0068 FB68     		ldr	r3, [r7, #12]
 876:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 1230              		.loc 1 876 0
 1231 006a 181C     		add	r0, r3, #0
 1232 006c BD46     		mov	sp, r7
 1233 006e 05B0     		add	sp, sp, #20
 1234              		@ sp needed
 1235 0070 90BD     		pop	{r4, r7, pc}
 1236              	.L88:
 1237 0072 C046     		.align	2
 1238              	.L87:
 1239 0074 00000000 		.word	ADC_SAR_Seq_1_offset
 1240 0078 00002041 		.word	1092616192
 1241 007c 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 1242              		.cfi_endproc
 1243              	.LFE19:
 1244              		.size	ADC_SAR_Seq_1_CountsTo_Volts, .-ADC_SAR_Seq_1_CountsTo_Volts
 1245              		.text
 1246              	.Letext0:
 1247              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1248              		.section	.debug_info,"",%progbits
 1249              	.Ldebug_info0:
 1250 0000 77040000 		.4byte	0x477
 1251 0004 0400     		.2byte	0x4
 1252 0006 00000000 		.4byte	.Ldebug_abbrev0
 1253 000a 04       		.byte	0x4
 1254 000b 01       		.uleb128 0x1
 1255 000c 20000000 		.4byte	.LASF59
 1256 0010 01       		.byte	0x1
 1257 0011 AE000000 		.4byte	.LASF60
 1258 0015 28030000 		.4byte	.LASF61
 1259 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1260 001d 00000000 		.4byte	0
 1261 0021 00000000 		.4byte	.Ldebug_line0
 1262 0025 02       		.uleb128 0x2
 1263 0026 01       		.byte	0x1
 1264 0027 06       		.byte	0x6
 1265 0028 FB030000 		.4byte	.LASF0
 1266 002c 02       		.uleb128 0x2
 1267 002d 01       		.byte	0x1
 1268 002e 08       		.byte	0x8
 1269 002f 94010000 		.4byte	.LASF1
 1270 0033 02       		.uleb128 0x2
 1271 0034 02       		.byte	0x2
 1272 0035 05       		.byte	0x5
 1273 0036 A9030000 		.4byte	.LASF2
 1274 003a 02       		.uleb128 0x2
 1275 003b 02       		.byte	0x2
 1276 003c 07       		.byte	0x7
 1277 003d 07040000 		.4byte	.LASF3
 1278 0041 02       		.uleb128 0x2
 1279 0042 04       		.byte	0x4
 1280 0043 05       		.byte	0x5
 1281 0044 D4030000 		.4byte	.LASF4
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 39


 1282 0048 02       		.uleb128 0x2
 1283 0049 04       		.byte	0x4
 1284 004a 07       		.byte	0x7
 1285 004b D6010000 		.4byte	.LASF5
 1286 004f 02       		.uleb128 0x2
 1287 0050 08       		.byte	0x8
 1288 0051 05       		.byte	0x5
 1289 0052 6A030000 		.4byte	.LASF6
 1290 0056 02       		.uleb128 0x2
 1291 0057 08       		.byte	0x8
 1292 0058 07       		.byte	0x7
 1293 0059 DF020000 		.4byte	.LASF7
 1294 005d 03       		.uleb128 0x3
 1295 005e 04       		.byte	0x4
 1296 005f 05       		.byte	0x5
 1297 0060 696E7400 		.ascii	"int\000"
 1298 0064 02       		.uleb128 0x2
 1299 0065 04       		.byte	0x4
 1300 0066 07       		.byte	0x7
 1301 0067 B0020000 		.4byte	.LASF8
 1302 006b 04       		.uleb128 0x4
 1303 006c B3030000 		.4byte	.LASF9
 1304 0070 02       		.byte	0x2
 1305 0071 3801     		.2byte	0x138
 1306 0073 2C000000 		.4byte	0x2c
 1307 0077 04       		.uleb128 0x4
 1308 0078 7F020000 		.4byte	.LASF10
 1309 007c 02       		.byte	0x2
 1310 007d 3901     		.2byte	0x139
 1311 007f 3A000000 		.4byte	0x3a
 1312 0083 04       		.uleb128 0x4
 1313 0084 90020000 		.4byte	.LASF11
 1314 0088 02       		.byte	0x2
 1315 0089 3A01     		.2byte	0x13a
 1316 008b 48000000 		.4byte	0x48
 1317 008f 04       		.uleb128 0x4
 1318 0090 D0010000 		.4byte	.LASF12
 1319 0094 02       		.byte	0x2
 1320 0095 3C01     		.2byte	0x13c
 1321 0097 33000000 		.4byte	0x33
 1322 009b 04       		.uleb128 0x4
 1323 009c E8010000 		.4byte	.LASF13
 1324 00a0 02       		.byte	0x2
 1325 00a1 3D01     		.2byte	0x13d
 1326 00a3 41000000 		.4byte	0x41
 1327 00a7 04       		.uleb128 0x4
 1328 00a8 82010000 		.4byte	.LASF14
 1329 00ac 02       		.byte	0x2
 1330 00ad 3E01     		.2byte	0x13e
 1331 00af B3000000 		.4byte	0xb3
 1332 00b3 02       		.uleb128 0x2
 1333 00b4 04       		.byte	0x4
 1334 00b5 04       		.byte	0x4
 1335 00b6 F3000000 		.4byte	.LASF15
 1336 00ba 02       		.uleb128 0x2
 1337 00bb 08       		.byte	0x8
 1338 00bc 04       		.byte	0x4
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 40


 1339 00bd 34020000 		.4byte	.LASF16
 1340 00c1 04       		.uleb128 0x4
 1341 00c2 21040000 		.4byte	.LASF17
 1342 00c6 02       		.byte	0x2
 1343 00c7 4301     		.2byte	0x143
 1344 00c9 4F000000 		.4byte	0x4f
 1345 00cd 02       		.uleb128 0x2
 1346 00ce 01       		.byte	0x1
 1347 00cf 08       		.byte	0x8
 1348 00d0 58010000 		.4byte	.LASF18
 1349 00d4 04       		.uleb128 0x4
 1350 00d5 1A000000 		.4byte	.LASF19
 1351 00d9 02       		.byte	0x2
 1352 00da E401     		.2byte	0x1e4
 1353 00dc E0000000 		.4byte	0xe0
 1354 00e0 05       		.uleb128 0x5
 1355 00e1 83000000 		.4byte	0x83
 1356 00e5 02       		.uleb128 0x2
 1357 00e6 04       		.byte	0x4
 1358 00e7 07       		.byte	0x7
 1359 00e8 61030000 		.4byte	.LASF20
 1360 00ec 06       		.uleb128 0x6
 1361 00ed 20020000 		.4byte	.LASF24
 1362 00f1 01       		.byte	0x1
 1363 00f2 3F       		.byte	0x3f
 1364 00f3 00000000 		.4byte	.LFB2
 1365 00f7 24000000 		.4byte	.LFE2-.LFB2
 1366 00fb 01       		.uleb128 0x1
 1367 00fc 9C       		.byte	0x9c
 1368 00fd 07       		.uleb128 0x7
 1369 00fe 27040000 		.4byte	.LASF35
 1370 0102 01       		.byte	0x1
 1371 0103 5E       		.byte	0x5e
 1372 0104 00000000 		.4byte	.LFB3
 1373 0108 DC010000 		.4byte	.LFE3-.LFB3
 1374 010c 01       		.uleb128 0x1
 1375 010d 9C       		.byte	0x9c
 1376 010e 3D010000 		.4byte	0x13d
 1377 0112 08       		.uleb128 0x8
 1378 0113 7D030000 		.4byte	.LASF21
 1379 0117 01       		.byte	0x1
 1380 0118 60       		.byte	0x60
 1381 0119 83000000 		.4byte	0x83
 1382 011d 02       		.uleb128 0x2
 1383 011e 91       		.byte	0x91
 1384 011f 74       		.sleb128 -12
 1385 0120 08       		.uleb128 0x8
 1386 0121 8A010000 		.4byte	.LASF22
 1387 0125 01       		.byte	0x1
 1388 0126 61       		.byte	0x61
 1389 0127 83000000 		.4byte	0x83
 1390 012b 02       		.uleb128 0x2
 1391 012c 91       		.byte	0x91
 1392 012d 6C       		.sleb128 -20
 1393 012e 08       		.uleb128 0x8
 1394 012f D8020000 		.4byte	.LASF23
 1395 0133 01       		.byte	0x1
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 41


 1396 0134 62       		.byte	0x62
 1397 0135 9B000000 		.4byte	0x9b
 1398 0139 02       		.uleb128 0x2
 1399 013a 91       		.byte	0x91
 1400 013b 70       		.sleb128 -16
 1401 013c 00       		.byte	0
 1402 013d 09       		.uleb128 0x9
 1403 013e EE010000 		.4byte	.LASF25
 1404 0142 01       		.byte	0x1
 1405 0143 4A01     		.2byte	0x14a
 1406 0145 00000000 		.4byte	.LFB4
 1407 0149 38000000 		.4byte	.LFE4-.LFB4
 1408 014d 01       		.uleb128 0x1
 1409 014e 9C       		.byte	0x9c
 1410 014f 0A       		.uleb128 0xa
 1411 0150 A2010000 		.4byte	.LASF26
 1412 0154 01       		.byte	0x1
 1413 0155 6D01     		.2byte	0x16d
 1414 0157 00000000 		.4byte	.LFB5
 1415 015b 18000000 		.4byte	.LFE5-.LFB5
 1416 015f 01       		.uleb128 0x1
 1417 0160 9C       		.byte	0x9c
 1418 0161 0A       		.uleb128 0xa
 1419 0162 BD020000 		.4byte	.LASF27
 1420 0166 01       		.byte	0x1
 1421 0167 8701     		.2byte	0x187
 1422 0169 00000000 		.4byte	.LFB6
 1423 016d 1C000000 		.4byte	.LFE6-.LFB6
 1424 0171 01       		.uleb128 0x1
 1425 0172 9C       		.byte	0x9c
 1426 0173 0A       		.uleb128 0xa
 1427 0174 00000000 		.4byte	.LASF28
 1428 0178 01       		.byte	0x1
 1429 0179 A001     		.2byte	0x1a0
 1430 017b 00000000 		.4byte	.LFB7
 1431 017f 1C000000 		.4byte	.LFE7-.LFB7
 1432 0183 01       		.uleb128 0x1
 1433 0184 9C       		.byte	0x9c
 1434 0185 0B       		.uleb128 0xb
 1435 0186 DD030000 		.4byte	.LASF30
 1436 018a 01       		.byte	0x1
 1437 018b C201     		.2byte	0x1c2
 1438 018d 83000000 		.4byte	0x83
 1439 0191 00000000 		.4byte	.LFB8
 1440 0195 48000000 		.4byte	.LFE8-.LFB8
 1441 0199 01       		.uleb128 0x1
 1442 019a 9C       		.byte	0x9c
 1443 019b BE010000 		.4byte	0x1be
 1444 019f 0C       		.uleb128 0xc
 1445 01a0 A1030000 		.4byte	.LASF32
 1446 01a4 01       		.byte	0x1
 1447 01a5 C201     		.2byte	0x1c2
 1448 01a7 83000000 		.4byte	0x83
 1449 01ab 02       		.uleb128 0x2
 1450 01ac 91       		.byte	0x91
 1451 01ad 6C       		.sleb128 -20
 1452 01ae 0D       		.uleb128 0xd
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 42


 1453 01af 5D010000 		.4byte	.LASF29
 1454 01b3 01       		.byte	0x1
 1455 01b4 C401     		.2byte	0x1c4
 1456 01b6 83000000 		.4byte	0x83
 1457 01ba 02       		.uleb128 0x2
 1458 01bb 91       		.byte	0x91
 1459 01bc 74       		.sleb128 -12
 1460 01bd 00       		.byte	0
 1461 01be 0E       		.uleb128 0xe
 1462 01bf 3A040000 		.4byte	.LASF31
 1463 01c3 01       		.byte	0x1
 1464 01c4 F801     		.2byte	0x1f8
 1465 01c6 8F000000 		.4byte	0x8f
 1466 01ca 00000000 		.4byte	.LFB9
 1467 01ce 44000000 		.4byte	.LFE9-.LFB9
 1468 01d2 01       		.uleb128 0x1
 1469 01d3 9C       		.byte	0x9c
 1470 01d4 F7010000 		.4byte	0x1f7
 1471 01d8 0C       		.uleb128 0xc
 1472 01d9 55030000 		.4byte	.LASF33
 1473 01dd 01       		.byte	0x1
 1474 01de F801     		.2byte	0x1f8
 1475 01e0 83000000 		.4byte	0x83
 1476 01e4 02       		.uleb128 0x2
 1477 01e5 91       		.byte	0x91
 1478 01e6 6C       		.sleb128 -20
 1479 01e7 0D       		.uleb128 0xd
 1480 01e8 1A040000 		.4byte	.LASF34
 1481 01ec 01       		.byte	0x1
 1482 01ed FA01     		.2byte	0x1fa
 1483 01ef 83000000 		.4byte	0x83
 1484 01f3 02       		.uleb128 0x2
 1485 01f4 91       		.byte	0x91
 1486 01f5 74       		.sleb128 -12
 1487 01f6 00       		.byte	0
 1488 01f7 0F       		.uleb128 0xf
 1489 01f8 0E030000 		.4byte	.LASF36
 1490 01fc 01       		.byte	0x1
 1491 01fd 2502     		.2byte	0x225
 1492 01ff 00000000 		.4byte	.LFB10
 1493 0203 1C000000 		.4byte	.LFE10-.LFB10
 1494 0207 01       		.uleb128 0x1
 1495 0208 9C       		.byte	0x9c
 1496 0209 1D020000 		.4byte	0x21d
 1497 020d 0C       		.uleb128 0xc
 1498 020e 78030000 		.4byte	.LASF37
 1499 0212 01       		.byte	0x1
 1500 0213 2502     		.2byte	0x225
 1501 0215 83000000 		.4byte	0x83
 1502 0219 02       		.uleb128 0x2
 1503 021a 91       		.byte	0x91
 1504 021b 74       		.sleb128 -12
 1505 021c 00       		.byte	0
 1506 021d 0F       		.uleb128 0xf
 1507 021e 03010000 		.4byte	.LASF38
 1508 0222 01       		.byte	0x1
 1509 0223 5102     		.2byte	0x251
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 43


 1510 0225 00000000 		.4byte	.LFB11
 1511 0229 30000000 		.4byte	.LFE11-.LFB11
 1512 022d 01       		.uleb128 0x1
 1513 022e 9C       		.byte	0x9c
 1514 022f 43020000 		.4byte	0x243
 1515 0233 0C       		.uleb128 0xc
 1516 0234 6E020000 		.4byte	.LASF39
 1517 0238 01       		.byte	0x1
 1518 0239 5102     		.2byte	0x251
 1519 023b 83000000 		.4byte	0x83
 1520 023f 02       		.uleb128 0x2
 1521 0240 91       		.byte	0x91
 1522 0241 74       		.sleb128 -12
 1523 0242 00       		.byte	0
 1524 0243 0F       		.uleb128 0xf
 1525 0244 B5010000 		.4byte	.LASF40
 1526 0248 01       		.byte	0x1
 1527 0249 6602     		.2byte	0x266
 1528 024b 00000000 		.4byte	.LFB12
 1529 024f 2C000000 		.4byte	.LFE12-.LFB12
 1530 0253 01       		.uleb128 0x1
 1531 0254 9C       		.byte	0x9c
 1532 0255 69020000 		.4byte	0x269
 1533 0259 0C       		.uleb128 0xc
 1534 025a F9000000 		.4byte	.LASF41
 1535 025e 01       		.byte	0x1
 1536 025f 6602     		.2byte	0x266
 1537 0261 83000000 		.4byte	0x83
 1538 0265 02       		.uleb128 0x2
 1539 0266 91       		.byte	0x91
 1540 0267 74       		.sleb128 -12
 1541 0268 00       		.byte	0
 1542 0269 0F       		.uleb128 0xf
 1543 026a B9030000 		.4byte	.LASF42
 1544 026e 01       		.byte	0x1
 1545 026f 7E02     		.2byte	0x27e
 1546 0271 00000000 		.4byte	.LFB13
 1547 0275 1C000000 		.4byte	.LFE13-.LFB13
 1548 0279 01       		.uleb128 0x1
 1549 027a 9C       		.byte	0x9c
 1550 027b 8F020000 		.4byte	0x28f
 1551 027f 0C       		.uleb128 0xc
 1552 0280 78030000 		.4byte	.LASF37
 1553 0284 01       		.byte	0x1
 1554 0285 7E02     		.2byte	0x27e
 1555 0287 83000000 		.4byte	0x83
 1556 028b 02       		.uleb128 0x2
 1557 028c 91       		.byte	0x91
 1558 028d 74       		.sleb128 -12
 1559 028e 00       		.byte	0
 1560 028f 0F       		.uleb128 0xf
 1561 0290 97020000 		.4byte	.LASF43
 1562 0294 01       		.byte	0x1
 1563 0295 9502     		.2byte	0x295
 1564 0297 00000000 		.4byte	.LFB14
 1565 029b 1C000000 		.4byte	.LFE14-.LFB14
 1566 029f 01       		.uleb128 0x1
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 44


 1567 02a0 9C       		.byte	0x9c
 1568 02a1 B5020000 		.4byte	0x2b5
 1569 02a5 0C       		.uleb128 0xc
 1570 02a6 78030000 		.4byte	.LASF37
 1571 02aa 01       		.byte	0x1
 1572 02ab 9502     		.2byte	0x295
 1573 02ad 83000000 		.4byte	0x83
 1574 02b1 02       		.uleb128 0x2
 1575 02b2 91       		.byte	0x91
 1576 02b3 74       		.sleb128 -12
 1577 02b4 00       		.byte	0
 1578 02b5 10       		.uleb128 0x10
 1579 02b6 F6020000 		.4byte	.LASF44
 1580 02ba 01       		.byte	0x1
 1581 02bb B102     		.2byte	0x2b1
 1582 02bd 00000000 		.4byte	.LFB15
 1583 02c1 30000000 		.4byte	.LFE15-.LFB15
 1584 02c5 01       		.uleb128 0x1
 1585 02c6 9C       		.byte	0x9c
 1586 02c7 EA020000 		.4byte	0x2ea
 1587 02cb 0C       		.uleb128 0xc
 1588 02cc 55030000 		.4byte	.LASF33
 1589 02d0 01       		.byte	0x1
 1590 02d1 B102     		.2byte	0x2b1
 1591 02d3 83000000 		.4byte	0x83
 1592 02d7 02       		.uleb128 0x2
 1593 02d8 91       		.byte	0x91
 1594 02d9 74       		.sleb128 -12
 1595 02da 0C       		.uleb128 0xc
 1596 02db EC000000 		.4byte	.LASF45
 1597 02df 01       		.byte	0x1
 1598 02e0 B102     		.2byte	0x2b1
 1599 02e2 8F000000 		.4byte	0x8f
 1600 02e6 02       		.uleb128 0x2
 1601 02e7 91       		.byte	0x91
 1602 02e8 72       		.sleb128 -14
 1603 02e9 00       		.byte	0
 1604 02ea 10       		.uleb128 0x10
 1605 02eb 58020000 		.4byte	.LASF46
 1606 02ef 01       		.byte	0x1
 1607 02f0 D302     		.2byte	0x2d3
 1608 02f2 00000000 		.4byte	.LFB16
 1609 02f6 2C000000 		.4byte	.LFE16-.LFB16
 1610 02fa 01       		.uleb128 0x1
 1611 02fb 9C       		.byte	0x9c
 1612 02fc 1F030000 		.4byte	0x31f
 1613 0300 0C       		.uleb128 0xc
 1614 0301 55030000 		.4byte	.LASF33
 1615 0305 01       		.byte	0x1
 1616 0306 D302     		.2byte	0x2d3
 1617 0308 83000000 		.4byte	0x83
 1618 030c 02       		.uleb128 0x2
 1619 030d 91       		.byte	0x91
 1620 030e 74       		.sleb128 -12
 1621 030f 0C       		.uleb128 0xc
 1622 0310 77020000 		.4byte	.LASF47
 1623 0314 01       		.byte	0x1
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 45


 1624 0315 D302     		.2byte	0x2d3
 1625 0317 9B000000 		.4byte	0x9b
 1626 031b 02       		.uleb128 0x2
 1627 031c 91       		.byte	0x91
 1628 031d 70       		.sleb128 -16
 1629 031e 00       		.byte	0
 1630 031f 0E       		.uleb128 0xe
 1631 0320 83030000 		.4byte	.LASF48
 1632 0324 01       		.byte	0x1
 1633 0325 F402     		.2byte	0x2f4
 1634 0327 8F000000 		.4byte	0x8f
 1635 032b 00000000 		.4byte	.LFB17
 1636 032f A4000000 		.4byte	.LFE17-.LFB17
 1637 0333 01       		.uleb128 0x1
 1638 0334 9C       		.byte	0x9c
 1639 0335 67030000 		.4byte	0x367
 1640 0339 0C       		.uleb128 0xc
 1641 033a 55030000 		.4byte	.LASF33
 1642 033e 01       		.byte	0x1
 1643 033f F402     		.2byte	0x2f4
 1644 0341 83000000 		.4byte	0x83
 1645 0345 02       		.uleb128 0x2
 1646 0346 91       		.byte	0x91
 1647 0347 6C       		.sleb128 -20
 1648 0348 0C       		.uleb128 0xc
 1649 0349 86020000 		.4byte	.LASF49
 1650 034d 01       		.byte	0x1
 1651 034e F402     		.2byte	0x2f4
 1652 0350 8F000000 		.4byte	0x8f
 1653 0354 02       		.uleb128 0x2
 1654 0355 91       		.byte	0x91
 1655 0356 6A       		.sleb128 -22
 1656 0357 0D       		.uleb128 0xd
 1657 0358 5A030000 		.4byte	.LASF50
 1658 035c 01       		.byte	0x1
 1659 035d F602     		.2byte	0x2f6
 1660 035f 8F000000 		.4byte	0x8f
 1661 0363 02       		.uleb128 0x2
 1662 0364 91       		.byte	0x91
 1663 0365 76       		.sleb128 -10
 1664 0366 00       		.byte	0
 1665 0367 0E       		.uleb128 0xe
 1666 0368 64010000 		.4byte	.LASF51
 1667 036c 01       		.byte	0x1
 1668 036d 2A03     		.2byte	0x32a
 1669 036f 9B000000 		.4byte	0x9b
 1670 0373 00000000 		.4byte	.LFB18
 1671 0377 90000000 		.4byte	.LFE18-.LFB18
 1672 037b 01       		.uleb128 0x1
 1673 037c 9C       		.byte	0x9c
 1674 037d AF030000 		.4byte	0x3af
 1675 0381 0C       		.uleb128 0xc
 1676 0382 55030000 		.4byte	.LASF33
 1677 0386 01       		.byte	0x1
 1678 0387 2A03     		.2byte	0x32a
 1679 0389 83000000 		.4byte	0x83
 1680 038d 02       		.uleb128 0x2
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 46


 1681 038e 91       		.byte	0x91
 1682 038f 64       		.sleb128 -28
 1683 0390 0C       		.uleb128 0xc
 1684 0391 86020000 		.4byte	.LASF49
 1685 0395 01       		.byte	0x1
 1686 0396 2A03     		.2byte	0x32a
 1687 0398 8F000000 		.4byte	0x8f
 1688 039c 02       		.uleb128 0x2
 1689 039d 91       		.byte	0x91
 1690 039e 62       		.sleb128 -30
 1691 039f 0D       		.uleb128 0xd
 1692 03a0 3B010000 		.4byte	.LASF52
 1693 03a4 01       		.byte	0x1
 1694 03a5 2C03     		.2byte	0x32c
 1695 03a7 C1000000 		.4byte	0xc1
 1696 03ab 02       		.uleb128 0x2
 1697 03ac 91       		.byte	0x91
 1698 03ad 68       		.sleb128 -24
 1699 03ae 00       		.byte	0
 1700 03af 0E       		.uleb128 0xe
 1701 03b0 3B020000 		.4byte	.LASF53
 1702 03b4 01       		.byte	0x1
 1703 03b5 5703     		.2byte	0x357
 1704 03b7 A7000000 		.4byte	0xa7
 1705 03bb 00000000 		.4byte	.LFB19
 1706 03bf 80000000 		.4byte	.LFE19-.LFB19
 1707 03c3 01       		.uleb128 0x1
 1708 03c4 9C       		.byte	0x9c
 1709 03c5 F7030000 		.4byte	0x3f7
 1710 03c9 0C       		.uleb128 0xc
 1711 03ca 55030000 		.4byte	.LASF33
 1712 03ce 01       		.byte	0x1
 1713 03cf 5703     		.2byte	0x357
 1714 03d1 83000000 		.4byte	0x83
 1715 03d5 02       		.uleb128 0x2
 1716 03d6 91       		.byte	0x91
 1717 03d7 64       		.sleb128 -28
 1718 03d8 0C       		.uleb128 0xc
 1719 03d9 86020000 		.4byte	.LASF49
 1720 03dd 01       		.byte	0x1
 1721 03de 5703     		.2byte	0x357
 1722 03e0 8F000000 		.4byte	0x8f
 1723 03e4 02       		.uleb128 0x2
 1724 03e5 91       		.byte	0x91
 1725 03e6 62       		.sleb128 -30
 1726 03e7 0D       		.uleb128 0xd
 1727 03e8 4F030000 		.4byte	.LASF54
 1728 03ec 01       		.byte	0x1
 1729 03ed 5903     		.2byte	0x359
 1730 03ef A7000000 		.4byte	0xa7
 1731 03f3 02       		.uleb128 0x2
 1732 03f4 91       		.byte	0x91
 1733 03f5 6C       		.sleb128 -20
 1734 03f6 00       		.byte	0
 1735 03f7 11       		.uleb128 0x11
 1736 03f8 83000000 		.4byte	0x83
 1737 03fc 07040000 		.4byte	0x407
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 47


 1738 0400 12       		.uleb128 0x12
 1739 0401 E5000000 		.4byte	0xe5
 1740 0405 00       		.byte	0
 1741 0406 00       		.byte	0
 1742 0407 08       		.uleb128 0x8
 1743 0408 03020000 		.4byte	.LASF55
 1744 040c 01       		.byte	0x1
 1745 040d 21       		.byte	0x21
 1746 040e 18040000 		.4byte	0x418
 1747 0412 05       		.uleb128 0x5
 1748 0413 03       		.byte	0x3
 1749 0414 00000000 		.4byte	ADC_SAR_Seq_1_channelsConfig
 1750 0418 13       		.uleb128 0x13
 1751 0419 F7030000 		.4byte	0x3f7
 1752 041d 14       		.uleb128 0x14
 1753 041e 42010000 		.4byte	.LASF56
 1754 0422 01       		.byte	0x1
 1755 0423 18       		.byte	0x18
 1756 0424 6B000000 		.4byte	0x6b
 1757 0428 05       		.uleb128 0x5
 1758 0429 03       		.byte	0x3
 1759 042a 00000000 		.4byte	ADC_SAR_Seq_1_initVar
 1760 042e 11       		.uleb128 0x11
 1761 042f 8F000000 		.4byte	0x8f
 1762 0433 3E040000 		.4byte	0x43e
 1763 0437 12       		.uleb128 0x12
 1764 0438 E5000000 		.4byte	0xe5
 1765 043c 00       		.byte	0
 1766 043d 00       		.byte	0
 1767 043e 14       		.uleb128 0x14
 1768 043f D7000000 		.4byte	.LASF57
 1769 0443 01       		.byte	0x1
 1770 0444 19       		.byte	0x19
 1771 0445 4F040000 		.4byte	0x44f
 1772 0449 05       		.uleb128 0x5
 1773 044a 03       		.byte	0x3
 1774 044b 00000000 		.4byte	ADC_SAR_Seq_1_offset
 1775 044f 05       		.uleb128 0x5
 1776 0450 2E040000 		.4byte	0x42e
 1777 0454 11       		.uleb128 0x11
 1778 0455 9B000000 		.4byte	0x9b
 1779 0459 64040000 		.4byte	0x464
 1780 045d 12       		.uleb128 0x12
 1781 045e E5000000 		.4byte	0xe5
 1782 0462 00       		.byte	0
 1783 0463 00       		.byte	0
 1784 0464 14       		.uleb128 0x14
 1785 0465 1D010000 		.4byte	.LASF58
 1786 0469 01       		.byte	0x1
 1787 046a 1A       		.byte	0x1a
 1788 046b 75040000 		.4byte	0x475
 1789 046f 05       		.uleb128 0x5
 1790 0470 03       		.byte	0x3
 1791 0471 00000000 		.4byte	ADC_SAR_Seq_1_countsPer10Volt
 1792 0475 05       		.uleb128 0x5
 1793 0476 54040000 		.4byte	0x454
 1794 047a 00       		.byte	0
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 48


 1795              		.section	.debug_abbrev,"",%progbits
 1796              	.Ldebug_abbrev0:
 1797 0000 01       		.uleb128 0x1
 1798 0001 11       		.uleb128 0x11
 1799 0002 01       		.byte	0x1
 1800 0003 25       		.uleb128 0x25
 1801 0004 0E       		.uleb128 0xe
 1802 0005 13       		.uleb128 0x13
 1803 0006 0B       		.uleb128 0xb
 1804 0007 03       		.uleb128 0x3
 1805 0008 0E       		.uleb128 0xe
 1806 0009 1B       		.uleb128 0x1b
 1807 000a 0E       		.uleb128 0xe
 1808 000b 55       		.uleb128 0x55
 1809 000c 17       		.uleb128 0x17
 1810 000d 11       		.uleb128 0x11
 1811 000e 01       		.uleb128 0x1
 1812 000f 10       		.uleb128 0x10
 1813 0010 17       		.uleb128 0x17
 1814 0011 00       		.byte	0
 1815 0012 00       		.byte	0
 1816 0013 02       		.uleb128 0x2
 1817 0014 24       		.uleb128 0x24
 1818 0015 00       		.byte	0
 1819 0016 0B       		.uleb128 0xb
 1820 0017 0B       		.uleb128 0xb
 1821 0018 3E       		.uleb128 0x3e
 1822 0019 0B       		.uleb128 0xb
 1823 001a 03       		.uleb128 0x3
 1824 001b 0E       		.uleb128 0xe
 1825 001c 00       		.byte	0
 1826 001d 00       		.byte	0
 1827 001e 03       		.uleb128 0x3
 1828 001f 24       		.uleb128 0x24
 1829 0020 00       		.byte	0
 1830 0021 0B       		.uleb128 0xb
 1831 0022 0B       		.uleb128 0xb
 1832 0023 3E       		.uleb128 0x3e
 1833 0024 0B       		.uleb128 0xb
 1834 0025 03       		.uleb128 0x3
 1835 0026 08       		.uleb128 0x8
 1836 0027 00       		.byte	0
 1837 0028 00       		.byte	0
 1838 0029 04       		.uleb128 0x4
 1839 002a 16       		.uleb128 0x16
 1840 002b 00       		.byte	0
 1841 002c 03       		.uleb128 0x3
 1842 002d 0E       		.uleb128 0xe
 1843 002e 3A       		.uleb128 0x3a
 1844 002f 0B       		.uleb128 0xb
 1845 0030 3B       		.uleb128 0x3b
 1846 0031 05       		.uleb128 0x5
 1847 0032 49       		.uleb128 0x49
 1848 0033 13       		.uleb128 0x13
 1849 0034 00       		.byte	0
 1850 0035 00       		.byte	0
 1851 0036 05       		.uleb128 0x5
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 49


 1852 0037 35       		.uleb128 0x35
 1853 0038 00       		.byte	0
 1854 0039 49       		.uleb128 0x49
 1855 003a 13       		.uleb128 0x13
 1856 003b 00       		.byte	0
 1857 003c 00       		.byte	0
 1858 003d 06       		.uleb128 0x6
 1859 003e 2E       		.uleb128 0x2e
 1860 003f 00       		.byte	0
 1861 0040 3F       		.uleb128 0x3f
 1862 0041 19       		.uleb128 0x19
 1863 0042 03       		.uleb128 0x3
 1864 0043 0E       		.uleb128 0xe
 1865 0044 3A       		.uleb128 0x3a
 1866 0045 0B       		.uleb128 0xb
 1867 0046 3B       		.uleb128 0x3b
 1868 0047 0B       		.uleb128 0xb
 1869 0048 27       		.uleb128 0x27
 1870 0049 19       		.uleb128 0x19
 1871 004a 11       		.uleb128 0x11
 1872 004b 01       		.uleb128 0x1
 1873 004c 12       		.uleb128 0x12
 1874 004d 06       		.uleb128 0x6
 1875 004e 40       		.uleb128 0x40
 1876 004f 18       		.uleb128 0x18
 1877 0050 9642     		.uleb128 0x2116
 1878 0052 19       		.uleb128 0x19
 1879 0053 00       		.byte	0
 1880 0054 00       		.byte	0
 1881 0055 07       		.uleb128 0x7
 1882 0056 2E       		.uleb128 0x2e
 1883 0057 01       		.byte	0x1
 1884 0058 3F       		.uleb128 0x3f
 1885 0059 19       		.uleb128 0x19
 1886 005a 03       		.uleb128 0x3
 1887 005b 0E       		.uleb128 0xe
 1888 005c 3A       		.uleb128 0x3a
 1889 005d 0B       		.uleb128 0xb
 1890 005e 3B       		.uleb128 0x3b
 1891 005f 0B       		.uleb128 0xb
 1892 0060 27       		.uleb128 0x27
 1893 0061 19       		.uleb128 0x19
 1894 0062 11       		.uleb128 0x11
 1895 0063 01       		.uleb128 0x1
 1896 0064 12       		.uleb128 0x12
 1897 0065 06       		.uleb128 0x6
 1898 0066 40       		.uleb128 0x40
 1899 0067 18       		.uleb128 0x18
 1900 0068 9642     		.uleb128 0x2116
 1901 006a 19       		.uleb128 0x19
 1902 006b 01       		.uleb128 0x1
 1903 006c 13       		.uleb128 0x13
 1904 006d 00       		.byte	0
 1905 006e 00       		.byte	0
 1906 006f 08       		.uleb128 0x8
 1907 0070 34       		.uleb128 0x34
 1908 0071 00       		.byte	0
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 50


 1909 0072 03       		.uleb128 0x3
 1910 0073 0E       		.uleb128 0xe
 1911 0074 3A       		.uleb128 0x3a
 1912 0075 0B       		.uleb128 0xb
 1913 0076 3B       		.uleb128 0x3b
 1914 0077 0B       		.uleb128 0xb
 1915 0078 49       		.uleb128 0x49
 1916 0079 13       		.uleb128 0x13
 1917 007a 02       		.uleb128 0x2
 1918 007b 18       		.uleb128 0x18
 1919 007c 00       		.byte	0
 1920 007d 00       		.byte	0
 1921 007e 09       		.uleb128 0x9
 1922 007f 2E       		.uleb128 0x2e
 1923 0080 00       		.byte	0
 1924 0081 3F       		.uleb128 0x3f
 1925 0082 19       		.uleb128 0x19
 1926 0083 03       		.uleb128 0x3
 1927 0084 0E       		.uleb128 0xe
 1928 0085 3A       		.uleb128 0x3a
 1929 0086 0B       		.uleb128 0xb
 1930 0087 3B       		.uleb128 0x3b
 1931 0088 05       		.uleb128 0x5
 1932 0089 27       		.uleb128 0x27
 1933 008a 19       		.uleb128 0x19
 1934 008b 11       		.uleb128 0x11
 1935 008c 01       		.uleb128 0x1
 1936 008d 12       		.uleb128 0x12
 1937 008e 06       		.uleb128 0x6
 1938 008f 40       		.uleb128 0x40
 1939 0090 18       		.uleb128 0x18
 1940 0091 9642     		.uleb128 0x2116
 1941 0093 19       		.uleb128 0x19
 1942 0094 00       		.byte	0
 1943 0095 00       		.byte	0
 1944 0096 0A       		.uleb128 0xa
 1945 0097 2E       		.uleb128 0x2e
 1946 0098 00       		.byte	0
 1947 0099 3F       		.uleb128 0x3f
 1948 009a 19       		.uleb128 0x19
 1949 009b 03       		.uleb128 0x3
 1950 009c 0E       		.uleb128 0xe
 1951 009d 3A       		.uleb128 0x3a
 1952 009e 0B       		.uleb128 0xb
 1953 009f 3B       		.uleb128 0x3b
 1954 00a0 05       		.uleb128 0x5
 1955 00a1 27       		.uleb128 0x27
 1956 00a2 19       		.uleb128 0x19
 1957 00a3 11       		.uleb128 0x11
 1958 00a4 01       		.uleb128 0x1
 1959 00a5 12       		.uleb128 0x12
 1960 00a6 06       		.uleb128 0x6
 1961 00a7 40       		.uleb128 0x40
 1962 00a8 18       		.uleb128 0x18
 1963 00a9 9742     		.uleb128 0x2117
 1964 00ab 19       		.uleb128 0x19
 1965 00ac 00       		.byte	0
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 51


 1966 00ad 00       		.byte	0
 1967 00ae 0B       		.uleb128 0xb
 1968 00af 2E       		.uleb128 0x2e
 1969 00b0 01       		.byte	0x1
 1970 00b1 3F       		.uleb128 0x3f
 1971 00b2 19       		.uleb128 0x19
 1972 00b3 03       		.uleb128 0x3
 1973 00b4 0E       		.uleb128 0xe
 1974 00b5 3A       		.uleb128 0x3a
 1975 00b6 0B       		.uleb128 0xb
 1976 00b7 3B       		.uleb128 0x3b
 1977 00b8 05       		.uleb128 0x5
 1978 00b9 27       		.uleb128 0x27
 1979 00ba 19       		.uleb128 0x19
 1980 00bb 49       		.uleb128 0x49
 1981 00bc 13       		.uleb128 0x13
 1982 00bd 11       		.uleb128 0x11
 1983 00be 01       		.uleb128 0x1
 1984 00bf 12       		.uleb128 0x12
 1985 00c0 06       		.uleb128 0x6
 1986 00c1 40       		.uleb128 0x40
 1987 00c2 18       		.uleb128 0x18
 1988 00c3 9742     		.uleb128 0x2117
 1989 00c5 19       		.uleb128 0x19
 1990 00c6 01       		.uleb128 0x1
 1991 00c7 13       		.uleb128 0x13
 1992 00c8 00       		.byte	0
 1993 00c9 00       		.byte	0
 1994 00ca 0C       		.uleb128 0xc
 1995 00cb 05       		.uleb128 0x5
 1996 00cc 00       		.byte	0
 1997 00cd 03       		.uleb128 0x3
 1998 00ce 0E       		.uleb128 0xe
 1999 00cf 3A       		.uleb128 0x3a
 2000 00d0 0B       		.uleb128 0xb
 2001 00d1 3B       		.uleb128 0x3b
 2002 00d2 05       		.uleb128 0x5
 2003 00d3 49       		.uleb128 0x49
 2004 00d4 13       		.uleb128 0x13
 2005 00d5 02       		.uleb128 0x2
 2006 00d6 18       		.uleb128 0x18
 2007 00d7 00       		.byte	0
 2008 00d8 00       		.byte	0
 2009 00d9 0D       		.uleb128 0xd
 2010 00da 34       		.uleb128 0x34
 2011 00db 00       		.byte	0
 2012 00dc 03       		.uleb128 0x3
 2013 00dd 0E       		.uleb128 0xe
 2014 00de 3A       		.uleb128 0x3a
 2015 00df 0B       		.uleb128 0xb
 2016 00e0 3B       		.uleb128 0x3b
 2017 00e1 05       		.uleb128 0x5
 2018 00e2 49       		.uleb128 0x49
 2019 00e3 13       		.uleb128 0x13
 2020 00e4 02       		.uleb128 0x2
 2021 00e5 18       		.uleb128 0x18
 2022 00e6 00       		.byte	0
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 52


 2023 00e7 00       		.byte	0
 2024 00e8 0E       		.uleb128 0xe
 2025 00e9 2E       		.uleb128 0x2e
 2026 00ea 01       		.byte	0x1
 2027 00eb 3F       		.uleb128 0x3f
 2028 00ec 19       		.uleb128 0x19
 2029 00ed 03       		.uleb128 0x3
 2030 00ee 0E       		.uleb128 0xe
 2031 00ef 3A       		.uleb128 0x3a
 2032 00f0 0B       		.uleb128 0xb
 2033 00f1 3B       		.uleb128 0x3b
 2034 00f2 05       		.uleb128 0x5
 2035 00f3 27       		.uleb128 0x27
 2036 00f4 19       		.uleb128 0x19
 2037 00f5 49       		.uleb128 0x49
 2038 00f6 13       		.uleb128 0x13
 2039 00f7 11       		.uleb128 0x11
 2040 00f8 01       		.uleb128 0x1
 2041 00f9 12       		.uleb128 0x12
 2042 00fa 06       		.uleb128 0x6
 2043 00fb 40       		.uleb128 0x40
 2044 00fc 18       		.uleb128 0x18
 2045 00fd 9642     		.uleb128 0x2116
 2046 00ff 19       		.uleb128 0x19
 2047 0100 01       		.uleb128 0x1
 2048 0101 13       		.uleb128 0x13
 2049 0102 00       		.byte	0
 2050 0103 00       		.byte	0
 2051 0104 0F       		.uleb128 0xf
 2052 0105 2E       		.uleb128 0x2e
 2053 0106 01       		.byte	0x1
 2054 0107 3F       		.uleb128 0x3f
 2055 0108 19       		.uleb128 0x19
 2056 0109 03       		.uleb128 0x3
 2057 010a 0E       		.uleb128 0xe
 2058 010b 3A       		.uleb128 0x3a
 2059 010c 0B       		.uleb128 0xb
 2060 010d 3B       		.uleb128 0x3b
 2061 010e 05       		.uleb128 0x5
 2062 010f 27       		.uleb128 0x27
 2063 0110 19       		.uleb128 0x19
 2064 0111 11       		.uleb128 0x11
 2065 0112 01       		.uleb128 0x1
 2066 0113 12       		.uleb128 0x12
 2067 0114 06       		.uleb128 0x6
 2068 0115 40       		.uleb128 0x40
 2069 0116 18       		.uleb128 0x18
 2070 0117 9742     		.uleb128 0x2117
 2071 0119 19       		.uleb128 0x19
 2072 011a 01       		.uleb128 0x1
 2073 011b 13       		.uleb128 0x13
 2074 011c 00       		.byte	0
 2075 011d 00       		.byte	0
 2076 011e 10       		.uleb128 0x10
 2077 011f 2E       		.uleb128 0x2e
 2078 0120 01       		.byte	0x1
 2079 0121 3F       		.uleb128 0x3f
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 53


 2080 0122 19       		.uleb128 0x19
 2081 0123 03       		.uleb128 0x3
 2082 0124 0E       		.uleb128 0xe
 2083 0125 3A       		.uleb128 0x3a
 2084 0126 0B       		.uleb128 0xb
 2085 0127 3B       		.uleb128 0x3b
 2086 0128 05       		.uleb128 0x5
 2087 0129 27       		.uleb128 0x27
 2088 012a 19       		.uleb128 0x19
 2089 012b 11       		.uleb128 0x11
 2090 012c 01       		.uleb128 0x1
 2091 012d 12       		.uleb128 0x12
 2092 012e 06       		.uleb128 0x6
 2093 012f 40       		.uleb128 0x40
 2094 0130 18       		.uleb128 0x18
 2095 0131 9642     		.uleb128 0x2116
 2096 0133 19       		.uleb128 0x19
 2097 0134 01       		.uleb128 0x1
 2098 0135 13       		.uleb128 0x13
 2099 0136 00       		.byte	0
 2100 0137 00       		.byte	0
 2101 0138 11       		.uleb128 0x11
 2102 0139 01       		.uleb128 0x1
 2103 013a 01       		.byte	0x1
 2104 013b 49       		.uleb128 0x49
 2105 013c 13       		.uleb128 0x13
 2106 013d 01       		.uleb128 0x1
 2107 013e 13       		.uleb128 0x13
 2108 013f 00       		.byte	0
 2109 0140 00       		.byte	0
 2110 0141 12       		.uleb128 0x12
 2111 0142 21       		.uleb128 0x21
 2112 0143 00       		.byte	0
 2113 0144 49       		.uleb128 0x49
 2114 0145 13       		.uleb128 0x13
 2115 0146 2F       		.uleb128 0x2f
 2116 0147 0B       		.uleb128 0xb
 2117 0148 00       		.byte	0
 2118 0149 00       		.byte	0
 2119 014a 13       		.uleb128 0x13
 2120 014b 26       		.uleb128 0x26
 2121 014c 00       		.byte	0
 2122 014d 49       		.uleb128 0x49
 2123 014e 13       		.uleb128 0x13
 2124 014f 00       		.byte	0
 2125 0150 00       		.byte	0
 2126 0151 14       		.uleb128 0x14
 2127 0152 34       		.uleb128 0x34
 2128 0153 00       		.byte	0
 2129 0154 03       		.uleb128 0x3
 2130 0155 0E       		.uleb128 0xe
 2131 0156 3A       		.uleb128 0x3a
 2132 0157 0B       		.uleb128 0xb
 2133 0158 3B       		.uleb128 0x3b
 2134 0159 0B       		.uleb128 0xb
 2135 015a 49       		.uleb128 0x49
 2136 015b 13       		.uleb128 0x13
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 54


 2137 015c 3F       		.uleb128 0x3f
 2138 015d 19       		.uleb128 0x19
 2139 015e 02       		.uleb128 0x2
 2140 015f 18       		.uleb128 0x18
 2141 0160 00       		.byte	0
 2142 0161 00       		.byte	0
 2143 0162 00       		.byte	0
 2144              		.section	.debug_aranges,"",%progbits
 2145 0000 A4000000 		.4byte	0xa4
 2146 0004 0200     		.2byte	0x2
 2147 0006 00000000 		.4byte	.Ldebug_info0
 2148 000a 04       		.byte	0x4
 2149 000b 00       		.byte	0
 2150 000c 0000     		.2byte	0
 2151 000e 0000     		.2byte	0
 2152 0010 00000000 		.4byte	.LFB2
 2153 0014 24000000 		.4byte	.LFE2-.LFB2
 2154 0018 00000000 		.4byte	.LFB3
 2155 001c DC010000 		.4byte	.LFE3-.LFB3
 2156 0020 00000000 		.4byte	.LFB4
 2157 0024 38000000 		.4byte	.LFE4-.LFB4
 2158 0028 00000000 		.4byte	.LFB5
 2159 002c 18000000 		.4byte	.LFE5-.LFB5
 2160 0030 00000000 		.4byte	.LFB6
 2161 0034 1C000000 		.4byte	.LFE6-.LFB6
 2162 0038 00000000 		.4byte	.LFB7
 2163 003c 1C000000 		.4byte	.LFE7-.LFB7
 2164 0040 00000000 		.4byte	.LFB8
 2165 0044 48000000 		.4byte	.LFE8-.LFB8
 2166 0048 00000000 		.4byte	.LFB9
 2167 004c 44000000 		.4byte	.LFE9-.LFB9
 2168 0050 00000000 		.4byte	.LFB10
 2169 0054 1C000000 		.4byte	.LFE10-.LFB10
 2170 0058 00000000 		.4byte	.LFB11
 2171 005c 30000000 		.4byte	.LFE11-.LFB11
 2172 0060 00000000 		.4byte	.LFB12
 2173 0064 2C000000 		.4byte	.LFE12-.LFB12
 2174 0068 00000000 		.4byte	.LFB13
 2175 006c 1C000000 		.4byte	.LFE13-.LFB13
 2176 0070 00000000 		.4byte	.LFB14
 2177 0074 1C000000 		.4byte	.LFE14-.LFB14
 2178 0078 00000000 		.4byte	.LFB15
 2179 007c 30000000 		.4byte	.LFE15-.LFB15
 2180 0080 00000000 		.4byte	.LFB16
 2181 0084 2C000000 		.4byte	.LFE16-.LFB16
 2182 0088 00000000 		.4byte	.LFB17
 2183 008c A4000000 		.4byte	.LFE17-.LFB17
 2184 0090 00000000 		.4byte	.LFB18
 2185 0094 90000000 		.4byte	.LFE18-.LFB18
 2186 0098 00000000 		.4byte	.LFB19
 2187 009c 80000000 		.4byte	.LFE19-.LFB19
 2188 00a0 00000000 		.4byte	0
 2189 00a4 00000000 		.4byte	0
 2190              		.section	.debug_ranges,"",%progbits
 2191              	.Ldebug_ranges0:
 2192 0000 00000000 		.4byte	.LFB2
 2193 0004 24000000 		.4byte	.LFE2
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 55


 2194 0008 00000000 		.4byte	.LFB3
 2195 000c DC010000 		.4byte	.LFE3
 2196 0010 00000000 		.4byte	.LFB4
 2197 0014 38000000 		.4byte	.LFE4
 2198 0018 00000000 		.4byte	.LFB5
 2199 001c 18000000 		.4byte	.LFE5
 2200 0020 00000000 		.4byte	.LFB6
 2201 0024 1C000000 		.4byte	.LFE6
 2202 0028 00000000 		.4byte	.LFB7
 2203 002c 1C000000 		.4byte	.LFE7
 2204 0030 00000000 		.4byte	.LFB8
 2205 0034 48000000 		.4byte	.LFE8
 2206 0038 00000000 		.4byte	.LFB9
 2207 003c 44000000 		.4byte	.LFE9
 2208 0040 00000000 		.4byte	.LFB10
 2209 0044 1C000000 		.4byte	.LFE10
 2210 0048 00000000 		.4byte	.LFB11
 2211 004c 30000000 		.4byte	.LFE11
 2212 0050 00000000 		.4byte	.LFB12
 2213 0054 2C000000 		.4byte	.LFE12
 2214 0058 00000000 		.4byte	.LFB13
 2215 005c 1C000000 		.4byte	.LFE13
 2216 0060 00000000 		.4byte	.LFB14
 2217 0064 1C000000 		.4byte	.LFE14
 2218 0068 00000000 		.4byte	.LFB15
 2219 006c 30000000 		.4byte	.LFE15
 2220 0070 00000000 		.4byte	.LFB16
 2221 0074 2C000000 		.4byte	.LFE16
 2222 0078 00000000 		.4byte	.LFB17
 2223 007c A4000000 		.4byte	.LFE17
 2224 0080 00000000 		.4byte	.LFB18
 2225 0084 90000000 		.4byte	.LFE18
 2226 0088 00000000 		.4byte	.LFB19
 2227 008c 80000000 		.4byte	.LFE19
 2228 0090 00000000 		.4byte	0
 2229 0094 00000000 		.4byte	0
 2230              		.section	.debug_line,"",%progbits
 2231              	.Ldebug_line0:
 2232 0000 A2020000 		.section	.debug_str,"MS",%progbits,1
 2232      02004C00 
 2232      00000201 
 2232      FB0E0D00 
 2232      01010101 
 2233              	.LASF28:
 2234 0000 4144435F 		.ascii	"ADC_SAR_Seq_1_StopConvert\000"
 2234      5341525F 
 2234      5365715F 
 2234      315F5374 
 2234      6F70436F 
 2235              	.LASF19:
 2236 001a 72656733 		.ascii	"reg32\000"
 2236      3200
 2237              	.LASF59:
 2238 0020 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 2238      4320342E 
 2238      392E3320 
 2238      32303135 
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 56


 2238      30333033 
 2239 0053 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 2239      20726576 
 2239      6973696F 
 2239      6E203232 
 2239      31323230 
 2240 0086 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2240      66756E63 
 2240      74696F6E 
 2240      2D736563 
 2240      74696F6E 
 2241              	.LASF60:
 2242 00ae 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\ADC_SAR_Seq_1.c\000"
 2242      6E657261 
 2242      7465645F 
 2242      536F7572 
 2242      63655C50 
 2243              	.LASF57:
 2244 00d7 4144435F 		.ascii	"ADC_SAR_Seq_1_offset\000"
 2244      5341525F 
 2244      5365715F 
 2244      315F6F66 
 2244      66736574 
 2245              	.LASF45:
 2246 00ec 6F666673 		.ascii	"offset\000"
 2246      657400
 2247              	.LASF15:
 2248 00f3 666C6F61 		.ascii	"float\000"
 2248      7400
 2249              	.LASF41:
 2250 00f9 68696768 		.ascii	"highLimit\000"
 2250      4C696D69 
 2250      7400
 2251              	.LASF38:
 2252 0103 4144435F 		.ascii	"ADC_SAR_Seq_1_SetLowLimit\000"
 2252      5341525F 
 2252      5365715F 
 2252      315F5365 
 2252      744C6F77 
 2253              	.LASF58:
 2254 011d 4144435F 		.ascii	"ADC_SAR_Seq_1_countsPer10Volt\000"
 2254      5341525F 
 2254      5365715F 
 2254      315F636F 
 2254      756E7473 
 2255              	.LASF52:
 2256 013b 75566F6C 		.ascii	"uVolts\000"
 2256      747300
 2257              	.LASF56:
 2258 0142 4144435F 		.ascii	"ADC_SAR_Seq_1_initVar\000"
 2258      5341525F 
 2258      5365715F 
 2258      315F696E 
 2258      69745661 
 2259              	.LASF18:
 2260 0158 63686172 		.ascii	"char\000"
 2260      00
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 57


 2261              	.LASF29:
 2262 015d 73746174 		.ascii	"status\000"
 2262      757300
 2263              	.LASF51:
 2264 0164 4144435F 		.ascii	"ADC_SAR_Seq_1_CountsTo_uVolts\000"
 2264      5341525F 
 2264      5365715F 
 2264      315F436F 
 2264      756E7473 
 2265              	.LASF14:
 2266 0182 666C6F61 		.ascii	"float32\000"
 2266      74333200 
 2267              	.LASF22:
 2268 018a 746D7052 		.ascii	"tmpRegVal\000"
 2268      65675661 
 2268      6C00
 2269              	.LASF1:
 2270 0194 756E7369 		.ascii	"unsigned char\000"
 2270      676E6564 
 2270      20636861 
 2270      7200
 2271              	.LASF26:
 2272 01a2 4144435F 		.ascii	"ADC_SAR_Seq_1_Stop\000"
 2272      5341525F 
 2272      5365715F 
 2272      315F5374 
 2272      6F7000
 2273              	.LASF40:
 2274 01b5 4144435F 		.ascii	"ADC_SAR_Seq_1_SetHighLimit\000"
 2274      5341525F 
 2274      5365715F 
 2274      315F5365 
 2274      74486967 
 2275              	.LASF12:
 2276 01d0 696E7431 		.ascii	"int16\000"
 2276      3600
 2277              	.LASF5:
 2278 01d6 6C6F6E67 		.ascii	"long unsigned int\000"
 2278      20756E73 
 2278      69676E65 
 2278      6420696E 
 2278      7400
 2279              	.LASF13:
 2280 01e8 696E7433 		.ascii	"int32\000"
 2280      3200
 2281              	.LASF25:
 2282 01ee 4144435F 		.ascii	"ADC_SAR_Seq_1_Enable\000"
 2282      5341525F 
 2282      5365715F 
 2282      315F456E 
 2282      61626C65 
 2283              	.LASF55:
 2284 0203 4144435F 		.ascii	"ADC_SAR_Seq_1_channelsConfig\000"
 2284      5341525F 
 2284      5365715F 
 2284      315F6368 
 2284      616E6E65 
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 58


 2285              	.LASF24:
 2286 0220 4144435F 		.ascii	"ADC_SAR_Seq_1_Start\000"
 2286      5341525F 
 2286      5365715F 
 2286      315F5374 
 2286      61727400 
 2287              	.LASF16:
 2288 0234 646F7562 		.ascii	"double\000"
 2288      6C6500
 2289              	.LASF53:
 2290 023b 4144435F 		.ascii	"ADC_SAR_Seq_1_CountsTo_Volts\000"
 2290      5341525F 
 2290      5365715F 
 2290      315F436F 
 2290      756E7473 
 2291              	.LASF46:
 2292 0258 4144435F 		.ascii	"ADC_SAR_Seq_1_SetGain\000"
 2292      5341525F 
 2292      5365715F 
 2292      315F5365 
 2292      74476169 
 2293              	.LASF39:
 2294 026e 6C6F774C 		.ascii	"lowLimit\000"
 2294      696D6974 
 2294      00
 2295              	.LASF47:
 2296 0277 61646347 		.ascii	"adcGain\000"
 2296      61696E00 
 2297              	.LASF10:
 2298 027f 75696E74 		.ascii	"uint16\000"
 2298      313600
 2299              	.LASF49:
 2300 0286 61646343 		.ascii	"adcCounts\000"
 2300      6F756E74 
 2300      7300
 2301              	.LASF11:
 2302 0290 75696E74 		.ascii	"uint32\000"
 2302      333200
 2303              	.LASF43:
 2304 0297 4144435F 		.ascii	"ADC_SAR_Seq_1_SetSatMask\000"
 2304      5341525F 
 2304      5365715F 
 2304      315F5365 
 2304      74536174 
 2305              	.LASF8:
 2306 02b0 756E7369 		.ascii	"unsigned int\000"
 2306      676E6564 
 2306      20696E74 
 2306      00
 2307              	.LASF27:
 2308 02bd 4144435F 		.ascii	"ADC_SAR_Seq_1_StartConvert\000"
 2308      5341525F 
 2308      5365715F 
 2308      315F5374 
 2308      61727443 
 2309              	.LASF23:
 2310 02d8 636F756E 		.ascii	"counts\000"
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 59


 2310      747300
 2311              	.LASF7:
 2312 02df 6C6F6E67 		.ascii	"long long unsigned int\000"
 2312      206C6F6E 
 2312      6720756E 
 2312      7369676E 
 2312      65642069 
 2313              	.LASF44:
 2314 02f6 4144435F 		.ascii	"ADC_SAR_Seq_1_SetOffset\000"
 2314      5341525F 
 2314      5365715F 
 2314      315F5365 
 2314      744F6666 
 2315              	.LASF36:
 2316 030e 4144435F 		.ascii	"ADC_SAR_Seq_1_SetChanMask\000"
 2316      5341525F 
 2316      5365715F 
 2316      315F5365 
 2316      74436861 
 2317              	.LASF61:
 2318 0328 453A5C43 		.ascii	"E:\\Cypress\\FirstApp\\TransferByte.cydsn\000"
 2318      79707265 
 2318      73735C46 
 2318      69727374 
 2318      4170705C 
 2319              	.LASF54:
 2320 034f 766F6C74 		.ascii	"volts\000"
 2320      7300
 2321              	.LASF33:
 2322 0355 6368616E 		.ascii	"chan\000"
 2322      00
 2323              	.LASF50:
 2324 035a 6D566F6C 		.ascii	"mVolts\000"
 2324      747300
 2325              	.LASF20:
 2326 0361 73697A65 		.ascii	"sizetype\000"
 2326      74797065 
 2326      00
 2327              	.LASF6:
 2328 036a 6C6F6E67 		.ascii	"long long int\000"
 2328      206C6F6E 
 2328      6720696E 
 2328      7400
 2329              	.LASF37:
 2330 0378 6D61736B 		.ascii	"mask\000"
 2330      00
 2331              	.LASF21:
 2332 037d 63684E75 		.ascii	"chNum\000"
 2332      6D00
 2333              	.LASF48:
 2334 0383 4144435F 		.ascii	"ADC_SAR_Seq_1_CountsTo_mVolts\000"
 2334      5341525F 
 2334      5365715F 
 2334      315F436F 
 2334      756E7473 
 2335              	.LASF32:
 2336 03a1 7265744D 		.ascii	"retMode\000"
ARM GAS  C:\Users\ilias\AppData\Local\Temp\cc9RCbfS.s 			page 60


 2336      6F646500 
 2337              	.LASF2:
 2338 03a9 73686F72 		.ascii	"short int\000"
 2338      7420696E 
 2338      7400
 2339              	.LASF9:
 2340 03b3 75696E74 		.ascii	"uint8\000"
 2340      3800
 2341              	.LASF42:
 2342 03b9 4144435F 		.ascii	"ADC_SAR_Seq_1_SetLimitMask\000"
 2342      5341525F 
 2342      5365715F 
 2342      315F5365 
 2342      744C696D 
 2343              	.LASF4:
 2344 03d4 6C6F6E67 		.ascii	"long int\000"
 2344      20696E74 
 2344      00
 2345              	.LASF30:
 2346 03dd 4144435F 		.ascii	"ADC_SAR_Seq_1_IsEndConversion\000"
 2346      5341525F 
 2346      5365715F 
 2346      315F4973 
 2346      456E6443 
 2347              	.LASF0:
 2348 03fb 7369676E 		.ascii	"signed char\000"
 2348      65642063 
 2348      68617200 
 2349              	.LASF3:
 2350 0407 73686F72 		.ascii	"short unsigned int\000"
 2350      7420756E 
 2350      7369676E 
 2350      65642069 
 2350      6E7400
 2351              	.LASF34:
 2352 041a 72657375 		.ascii	"result\000"
 2352      6C7400
 2353              	.LASF17:
 2354 0421 696E7436 		.ascii	"int64\000"
 2354      3400
 2355              	.LASF35:
 2356 0427 4144435F 		.ascii	"ADC_SAR_Seq_1_Init\000"
 2356      5341525F 
 2356      5365715F 
 2356      315F496E 
 2356      697400
 2357              	.LASF31:
 2358 043a 4144435F 		.ascii	"ADC_SAR_Seq_1_GetResult16\000"
 2358      5341525F 
 2358      5365715F 
 2358      315F4765 
 2358      74526573 
 2359              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
